{"componentChunkName":"component---src-templates-markdown-js","path":"/lectures/12","result":{"data":{"markdownRemark":{"html":"<p>class: center, middle, block-text</p>\n<h1>Lecture 12</h1>\n<h2>Using MongoDB with Express</h2>\n<hr>\n<p>class: x-large</p>\n<h1>Agenda</h1>\n<ol>\n<li>Why use MongoDB?</li>\n<li>Installing MongoDB</li>\n<li>Connecting it to Express</li>\n</ol>\n<hr>\n<p>class: center, middle, block-text</p>\n<h1>Why use MongoDB?</h1>\n<hr>\n<p>class: med-large</p>\n<h1>The NoSQL Database Layer</h1>\n<ul>\n<li>MongoDB is an open source database source, that lets you store arbitrary data as JSON objects\n(internally represented as <a href=\"http://stackoverflow.com/questions/12438280/what-is-bson-and-exactly-how-is-it-different-from-json\">BSON</a> data types).</li>\n<li>Lightweight, fast and reliable.</li>\n<li>MongoDB was written to work seamlessly with a JavaScript web stack.</li>\n</ul>\n<hr>\n<p>class: med-large</p>\n<h2>Installing MongoDB</h2>\n<p>Assuming you already have an Express app working locally, you can either host your\nMongoDB database instance locally or on the cloud.</p>\n<ul>\n<li>If you're installing locally, you need to <a href=\"installing%20mongodb%20on%20windows\">install MongoDB</a> on your machine using homebrew.</li>\n<li>\n<p>Install the NPM package for your application</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> mongodb --save</code></pre></div>\n</li>\n<li>Alternatively, check out the amazing NPM package, <a href=\"https://www.npmjs.com/package/mongoose\">Mongoose</a>!</li>\n</ul>\n<hr>\n<p>class: large</p>\n<p>There are a few lines of code needed to connect your Express app to the database:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> MongoClient <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mongodb'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>MongoClient<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> <span class=\"token constant\">MONGO_URI</span> <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n\nMongoClient<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token constant\">MONGO_URI</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> db</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// connected database is 'db'</span>\n\n  app<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'listening on 3000'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>The above code, which should reside in your <code class=\"language-text\">app.js</code> file, only starts the server once the connection is established.</p>\n<hr>\n<p>class: med-large</p>\n<h2>The MongoDB Connection URI</h2>\n<p>The MongoDB URI is a string that represents the location of your MongoDB database instance. If you're hosting this on your local machine, the connection URI is:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">'mongodb://localhost:27017/&lt;name-of-your-db>'</span></code></pre></div>\n<p>If you're hosting your MongoDB instance on the <a href=\"https://mlab.com\">cloud</a> then the connection URI will likely look something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">'mongodb://&lt;dbuser>:&lt;dbpassword>'</span> <span class=\"token comment\">// auth</span>\n<span class=\"token operator\">+</span> <span class=\"token string\">'@ds04569826.mongolab.com:47955'</span> <span class=\"token comment\">// mongolab host</span>\n<span class=\"token operator\">+</span> <span class=\"token string\">'/&lt;your-db-name>'</span> <span class=\"token comment\">// specific db</span></code></pre></div>\n<hr>\n<p>class: x-large</p>\n<h1>Example</h1>\n<p>Check out the code for the Penn Course Review homework assignment!</p>\n<p>We connect using Mongoose, but the principles behind the connection are all the same.</p>\n<hr>\n<p>class: large</p>\n<h1>Fetching Data</h1>\n<p>Use the <code class=\"language-text\">find</code> or <code class=\"language-text\">findById</code> functions to select documents within collections and extract them from the database.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> quotes <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">collection</span><span class=\"token punctuation\">(</span><span class=\"token string\">'quotes'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> all_quotes <span class=\"token operator\">=</span> quotes<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> second_quote <span class=\"token operator\">=</span> quotes<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<hr>\n<p>class: center, middle, block-text</p>\n<h1>Mongoose</h1>\n<p>Straight-forward, schema-based solution to model your app data.</p>\n<p><a href=\"http://mongoosejs.com\">Website</a></p>\n<hr>\n<p>class: large</p>\n<h1>Basic Boilerplate</h1>\n<p>Similar syntax. Let's make a User Schema!</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> mongoose <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mongoose'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmongoose<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mongodb://localhost/blah'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> userSchema <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Schema</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n  username<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span> required<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  password<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span> required<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  created_at<span class=\"token operator\">:</span> Date<span class=\"token punctuation\">,</span>\n  updated_at<span class=\"token operator\">:</span> Date\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> User <span class=\"token operator\">=</span> mongoose<span class=\"token punctuation\">.</span><span class=\"token function\">model</span><span class=\"token punctuation\">(</span><span class=\"token string\">'User'</span><span class=\"token punctuation\">,</span> userSchema<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<hr>\n<p>class: large</p>\n<h1>Models, Schemas, and Methods</h1>\n<p>A mongoose Model is a \"constructor\" that allows us to make documents (think objects) that can be saved and retrieved from the database</p>\n<p>A mongoose Schema allows us to define attributes for the documents</p>\n<p>A mongoose Method can be defined on a Schema (think methods in a class).</p>\n<hr>\n<p>class: large</p>\n<h1>Custom Methods</h1>\n<p>Let's make our users cool!</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> mongoose <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mongoose'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> Schema <span class=\"token operator\">=</span> mongoose<span class=\"token punctuation\">.</span>Schema\n\n<span class=\"token keyword\">var</span> userSchema <span class=\"token operator\">=</span> <span class=\"token comment\">// ref slide 12</span>\n\nuserSchema<span class=\"token punctuation\">.</span>methods<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">coolify</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">' is cool'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// standard callback pattern!</span>\n  <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> User <span class=\"token operator\">=</span> mongoose<span class=\"token punctuation\">.</span><span class=\"token function\">model</span><span class=\"token punctuation\">(</span><span class=\"token string\">'User'</span><span class=\"token punctuation\">,</span> userSchema<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> User<span class=\"token punctuation\">;</span></code></pre></div>\n<hr>\n<p>class: large</p>\n<h1>Saving a Cool User</h1>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> User <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./user-module-location'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> devesh <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'Devesh'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ndevesh<span class=\"token punctuation\">.</span><span class=\"token function\">coolify</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> err<span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Devesh is cool</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ndevesh<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> err<span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'User saved!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<hr>\n<p>class: large</p>\n<h1>Get a User and update them</h1>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> User <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./user-module-location'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\nUser<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Devesh'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e<span class=\"token punctuation\">,</span> user</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> e<span class=\"token punctuation\">;</span>\n  user<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'Devesh Dayal'</span><span class=\"token punctuation\">;</span>\n  user<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> err<span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'User successfully updated!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<hr>\n<p>class: large</p>\n<h1>Delete a User</h1>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">User<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Devesh'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>  <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e<span class=\"token punctuation\">,</span> user</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> e<span class=\"token punctuation\">;</span>\n  user<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> e<span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'User successfully deleted!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<hr>\n<p>class: large</p>\n<h1>Do Something Before A User is Saved</h1>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">userSchema<span class=\"token punctuation\">.</span><span class=\"token function\">pre</span><span class=\"token punctuation\">(</span><span class=\"token string\">'save'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// check to see if the password was changed</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">isModified</span><span class=\"token punctuation\">(</span><span class=\"token string\">'password'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// bcrypt generates secure password hashes</span>\n  bcrypt<span class=\"token punctuation\">.</span><span class=\"token function\">hash</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>password<span class=\"token punctuation\">,</span> <span class=\"token string\">'salt'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> hash</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      user<span class=\"token punctuation\">.</span>password <span class=\"token operator\">=</span> hash<span class=\"token punctuation\">;</span>\n      <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<hr>\n<p>class: large</p>\n<h1>Check a User's Hashed Password</h1>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">userSchema<span class=\"token punctuation\">.</span>methods<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">checkPassword</span> <span class=\"token operator\">=</span>\n<span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">possiblePass<span class=\"token punctuation\">,</span> cb</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  bcrypt<span class=\"token punctuation\">.</span><span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>possiblePass<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>password<span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> isRight</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">cb</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">cb</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> isRight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<hr>\n<p>class: large</p>\n<h1>How to Use this to Log in someone</h1>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/login'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  username <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">;</span>\n  password <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>password<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>User<span class=\"token punctuation\">.</span><span class=\"token function\">findOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> username<span class=\"token operator\">:</span> username <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> user</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      user<span class=\"token punctuation\">.</span><span class=\"token function\">checkPassword</span><span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> isRight</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isRight<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// log them in using whatever</span>\n          <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'wrong'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<hr>\n<p>class: center, middle, block-text</p>\n<h1>User Authentication/Sessions</h1>\n<hr>\n<p>class: large</p>\n<h1>Recall HW6</h1>\n<p>We used cookieSession to handle storing a session</p>\n<p>A session (short for server side sessions), stores a session identifier (in miemory) to check  to see what client is hitting a server.</p>\n<ul>\n<li>This becomes a  bottleneck to maintain because you needt o keep track of all the different session identifiers in server memory</li>\n</ul>\n<hr>\n<h1>Ideal Scenario</h1>\n<ul>\n<li>We want to have some way of creating an identifier for each  client that is unique tot hem, but doesn't require us to store a mapping on our server from string -> user</li>\n<li>We want to be sure that this identifier is unique, has no collisions with other identifiers, can encode some info, and can be decrypted easily provided we have a  secret key</li>\n<li>The client then just passes this identifier along with any requests to the server</li>\n<li>For security, the token should have some way to  indicate when it is expired</li>\n</ul>\n<hr>\n<h1>Enter JWT (Token based  authenication)</h1>\n<ul>\n<li>JWT = JSON Web Token</li>\n</ul>\n<blockquote>\n<p>JSON Web Token (JWT) is an open standard (RFC 7519) that defines a compact and self-contained way for securely transmitting information between parties as a JSON object. This information can be verified and trusted because it is digitally signed. JWTs can be signed using a secret (with the HMAC algorithm) or a public/private key pair using RSA.</p>\n</blockquote>\n<ul>\n<li><code class=\"language-text\">xxxxx.yyyyy.zzzzz</code>  (x = header,  y = payload, z = signature)</li>\n<li>Cryptographically Secure (as far as we know)</li>\n<li>Optional Expiry date</li>\n<li>Can generate and verify on our server! Can decode on the client as well. But can't falsify a JWT.</li>\n</ul>\n<hr>\n<h1>Create Token</h1>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> payload <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  id<span class=\"token operator\">:</span> user<span class=\"token punctuation\">.</span>_id\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> token <span class=\"token operator\">=</span> jwt<span class=\"token punctuation\">.</span><span class=\"token function\">sign</span><span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">,</span>  secret<span class=\"token punctuation\">)</span></code></pre></div>\n<hr>\n<h1>Verify Token</h1>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">jwt<span class=\"token punctuation\">.</span><span class=\"token function\">verify</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">,</span> secret<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> decoded</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>      \n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// error</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// if everything is good, save to request for use in other routes</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<hr>\n<p>class: center, middle, block-text</p>\n<h1>Example API Only Login System</h1>\n<hr>\n<p>class: center, middle, block-text</p>\n<h2>Also check out <a href=\"http://passportjs.org/\">passport.js</a> for login schemes with facebook, google, twitter OAuth etc.</h2>","frontmatter":{"date":"January 29, 2019","path":"/lectures/12","title":"Using MongoDB with Express","metaTitle":null}}},"pageContext":{}}}