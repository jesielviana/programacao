{"componentChunkName":"component---src-templates-markdown-js","path":"/lectures/11","result":{"data":{"markdownRemark":{"html":"<p>class: center, middle, block-text</p>\n<h1>Lecture 11</h1>\n<h2>ES6</h2>\n<hr>\n<p>class: large</p>\n<h1>What is ES6?</h1>\n<p>ES6 (aka ES2015) is the newest version of ECMAScript (aka JavaScript). Its spec was just finalized this year, and although it's still in the 'experimental' phase, it looks like it should clean up some of the most verbose parts of JavaScript!</p>\n<p>ES6 has a lot of syntax changes from ES5 (which is what we've been working with up until this point). Some of these changes are entirely new, while others are just syntactic sugar for code we've already seen. We'll take a look at some of the most interesting ones in this lecture.</p>\n<hr>\n<p>class: x-large</p>\n<h1>Agenda</h1>\n<ol>\n<li>Enabling ES6 with Babel</li>\n<li>Variable Declarations with <code class=\"language-text\">let</code> and <code class=\"language-text\">const</code></li>\n<li>Template Strings</li>\n<li>Arrow Functions</li>\n<li>Objects</li>\n<li>Classes</li>\n</ol>\n<hr>\n<p>class: center, middle, block-text</p>\n<h1>Enabling ES6 with Babel</h1>\n<hr>\n<p>class: large</p>\n<h1>Configuring Babel</h1>\n<p>Whether you're working in Node or in the browser, you'll need a configuration file to get Babel working properly. This file is called <code class=\"language-text\">.babelrc</code>, and it's written in plain JSON. Babel can pull in a <a href=\"http://babeljs.io/docs/usage/babelrc/\">lot of different options</a> from this file, but in general you'll just want the <code class=\"language-text\">es2015</code> preset, which enables all ES6 features.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  presets<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>'es<span class=\"token number\">2015</span>'<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<p>class: med-large</p>\n<h1>Enabling ES6 in Node</h1>\n<p>To enable ES6 in Node, you'll need <a href=\"http://babeljs.io/\">Babel</a> to transform your ES6 files into ES5 that Node can understand. To do this, all that's required (pun intended!) is to require the <code class=\"language-text\">&#39;babel-core/register&#39;</code> module. Once this is done, Babel will automatically convert your beautiful ES6 code into not-so-beautiful ES5 on the fly.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'babel-core/register'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// This file contains your actual code, in ES6</span>\n<span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./shiny-es6-file'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<hr>\n<p>class: med-large</p>\n<h1>Enabling ES6 in the Browser</h1>\n<p>Enabling ES6 in the browser is a little bit trickier, because there's no <code class=\"language-text\">require</code> variable for Babel to mess with. We have a few options:</p>\n<ol>\n<li>We could use RequireJS or some other similar library, set to use Babel to transform ES6 to ES5 on the fly.</li>\n<li>We could use the Babel CLI to transform the files from the command line every time we make changes</li>\n<li>We could use the Babel plugin for <a href=\"https://github.com/babel/gulp-babel\">gulp</a> or <a href=\"https://github.com/babel/grunt-babel\">grunt</a>, and add a Babel step to a larger build chain (which might include <a href=\"https://github.com/vohof/gulp-livereload\">live reloading</a>, <a href=\"https://github.com/contra/gulp-concat\">concatenation</a>, <a href=\"https://github.com/terinjokes/gulp-uglify\">minification</a>, etc.)</li>\n</ol>\n<p>I almost always go with #3 because a build system speeds up development a lot. It's worth the time investment to get it working.</p>\n<hr>\n<p>class: center, middle, block-text</p>\n<h1>Variable Declarations</h1>\n<hr>\n<p>class: med-large</p>\n<p>We already know about <code class=\"language-text\">var</code>, which is the only declaration keyword in ES5. It works fine, but it's hoisted to the top of the scope it was declared in, which can lead to unexpected results.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Prints 10</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> xyz <span class=\"token operator\">=</span> <span class=\"token number\">14</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>xyz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 14</span></code></pre></div>\n<hr>\n<p>class: med-large</p>\n<p>The reason that code works the way it does is that <code class=\"language-text\">var</code> declarations are in scope for the entire function they were declared in (or globally, if they're defined in the global scope). The above code is executed by the JavaScript engine as:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Hoisted vars</span>\n<span class=\"token keyword\">var</span> i<span class=\"token punctuation\">,</span> xyz<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Prints 10</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  xyz <span class=\"token operator\">=</span> <span class=\"token number\">14</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>xyz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 14</span></code></pre></div>\n<hr>\n<p>class: med-large</p>\n<p>ES6 provides two new ways to declare variables: <code class=\"language-text\">let</code> and <code class=\"language-text\">const</code>.</p>\n<p><code class=\"language-text\">let</code> works almost exactly like <code class=\"language-text\">var</code>, except it's <em>block-scoped</em>. It only exists inside the curly braces { } that it was declared in. An attempt to reference a variable declared with <code class=\"language-text\">let</code> outside of its scope is a ReferenceError.</p>\n<p><code class=\"language-text\">const</code> is stricter still: a variable declared with <code class=\"language-text\">const</code> can <em>never be reassigned</em>. An attempt to do so will raise an error. This makes <code class=\"language-text\">const</code> very useful for declaring constants (like the number of degrees in a circle). In fact, it's good style to use <code class=\"language-text\">const</code> for <em>any</em> variable that is never meant to be reassigned!</p>\n<hr>\n<p>class: center, middle, block-text</p>\n<h1>Template Strings</h1>\n<hr>\n<p>class: med-large</p>\n<p>Strings in JavaScript have always been fairly annoying to work with. You can't include variables without concatenating with +, and there aren't multiline strings either.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> emotion <span class=\"token operator\">=</span> <span class=\"token string\">'sad'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span>\n<span class=\"token string\">'Oh ES5 strings\\n'</span> <span class=\"token operator\">+</span>\n<span class=\"token string\">'You make me so very '</span> <span class=\"token operator\">+</span> emotion <span class=\"token operator\">+</span> <span class=\"token string\">'\\n'</span> <span class=\"token operator\">+</span>\n<span class=\"token string\">'It is snowing on Mt. Fuji.'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>ES6 supports a <em>template string</em> syntax to get around these issues. Template strings are defined with backticks, and they support multiple lines and variable substitutions.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> emotion <span class=\"token operator\">=</span> <span class=\"token string\">'giddy with joy'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span>\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Template literals\nYou make me </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>emotion<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\nIt is snowing on Mt. Fuji.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></code></pre></div>\n<hr>\n<p>class: med-large</p>\n<p>Template strings are actually much more powerful than just variable substitutions. You can put anything into a template's substitution expression, including function calls:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> message <span class=\"token operator\">=</span> BACKTICK_LITERALThe price is $$<span class=\"token punctuation\">{</span><span class=\"token function\">getItemCost</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token constant\">BACKTICK_LITERAL</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>You can also define a <em>tag function</em> to parse a template literal and make your own substitutions. This can be used to do common string manipulation tasks like HTML escaping really easily!</h2>\n<p>class: center, middle, block-text</p>\n<h1>Arrow Functions</h1>\n<hr>\n<p>class: med-large</p>\n<p>Arrow functions are a tidier way to define a function in ES6. Rather than a function keyword, you can just use the following syntax:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">func</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Func!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Arrow functions that are one line long do not even need braces or a return statement:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">add</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a <span class=\"token operator\">+</span> b\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Prints 3</span></code></pre></div>\n<hr>\n<p>class: med-large</p>\n<p>Arrow functions have a one more very cool feature: they inherit the <code class=\"language-text\">this</code> context of the function where they were created. This means that you don't have to bind <code class=\"language-text\">this</code> to functions anymore - it's automatic!</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">f</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>k<span class=\"token operator\">:</span> <span class=\"token string\">'v'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Prints {k: 'v'}</span></code></pre></div>\n<hr>\n<p>class: med-large</p>\n<p>All functions (not just arrow functions) have gotten a few upgrades in ES6. The first is <em>default argument values</em> which are assigned to function arguments if they are undefined.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">add</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> a</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a <span class=\"token operator\">+</span> b</code></pre></div>\n<p>In addition, argument <em>splats</em> are now a full-on language feature, allowing functions to take in any number of arguments.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">add</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>nums</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>There's also a parallel <em>spread operator</em> that lets you pass in arrays as multiple parameters.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<hr>\n<p>class: med-large</p>\n<p>A final cool feature of ES6 functions is <em>tail call optimization</em>. Essentially, tail call optimization means that if a function A is called as the last statement of function B, then A is removed from the stack before B begins its execution. This makes it possible to implement functions like factorial recursively without causing a stack overflow. Neat!</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">factorial</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n<span class=\"token punctuation\">,</span> p <span class=\"token operator\">=</span> <span class=\"token number\">1</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span> <span class=\"token operator\">*</span> p<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> n <span class=\"token operator\">*</span> p<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// optimized</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">factorial</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<p>class: center, middle, block-text</p>\n<h1>Objects and Arrays</h1>\n<hr>\n<p>class: med-large</p>\n<p>Objects come with some cool new features in ES6. The first is concise method syntax, which makes defining methods a lot more pleasant:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> dog <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">speak</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Woof!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The second is <em>object structuring</em>, which allows you to assign a variable name to a property more concisely.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'Carl'</span><span class=\"token punctuation\">,</span> age <span class=\"token operator\">=</span> <span class=\"token number\">22</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//ES6 object structuring</span>\n<span class=\"token keyword\">let</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ES5 equivalent</span>\nperson <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>name<span class=\"token operator\">:</span> name<span class=\"token punctuation\">,</span> age<span class=\"token operator\">:</span> age<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<hr>\n<p>class: med-large</p>\n<p>The third is <em>destructuring</em>, which is the opposite of structuring. It lets you break down an object into properties, which you can then use as variables.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>name<span class=\"token operator\">:</span> <span class=\"token string\">'Carl'</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">:</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span> job<span class=\"token operator\">:</span> <span class=\"token string\">'Farmer'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> person<span class=\"token punctuation\">;</span></code></pre></div>\n<p>You can also destructure arrays:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> second<span class=\"token punctuation\">,</span> third<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>second<span class=\"token punctuation\">,</span> third<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2, 3</span></code></pre></div>\n<hr>\n<p>class: med</p>\n<p>The final addition we'll discuss is <em>getter and setter methods</em>, which allow you to use property syntax to call object methods.</p>\n<p>What does this actually mean? Well, consider what happens when you assign an index in an array, like <code class=\"language-text\">arr[3]</code>. This is a getter behind the scenes, because this assignment might change the length of the array - which is a side effect. Now we can define our own getters and setters with side effects of their own!</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  _prop<span class=\"token operator\">:</span> <span class=\"token string\">'value'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">get</span> <span class=\"token function\">prop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'getting prop'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_prop<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token keyword\">set</span> <span class=\"token function\">prop</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Setting prop'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_prop <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span>prop<span class=\"token punctuation\">;</span>\nobj<span class=\"token punctuation\">.</span>prop <span class=\"token operator\">=</span> <span class=\"token string\">'new-value'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<hr>\n<p>class: center, middle, block-text</p>\n<h1>Classes</h1>\n<hr>\n<p>class: med-large</p>\n<p>Classes finally exist in ES6, and their syntax is really nice!</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">greet</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>BACKTICK_LITERALHi<span class=\"token punctuation\">,</span> <span class=\"token constant\">I</span> am $<span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token constant\">BACKTICK_LITERAL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> bob <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bob'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nbob<span class=\"token punctuation\">.</span><span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Under the hood, this still sets up the prototype chain as normal. But it looks a lot nicer!</p>\n<hr>\n<p>class: med, smallest-code</p>\n<p>Classes support static members, which is often quite useful.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Circle</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">get</span> <span class=\"token constant\">DEGREES_IN_CIRCLE</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token number\">360</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Classes can also extend other classes:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Rectangle</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">w<span class=\"token punctuation\">,</span> h</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> w<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> h<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">get</span> <span class=\"token function\">area</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>width <span class=\"token operator\">*</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Square</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Rectangle</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">length</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>length<span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<p>For classes that extend other classes, you can use <code class=\"language-text\">super</code> in two ways. We've already seen the first: calling <code class=\"language-text\">super()</code> from the constructor in order to initialize the superclass. You can also get a reference to the \"prototype\" class using <code class=\"language-text\">super</code> in a method:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">LoudSquare</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Square</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">get</span> <span class=\"token function\">area</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'WE ARE GETTING AREA!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span>area<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Note that <code class=\"language-text\">super</code> is capable of looking multiple levels up the inheritance chain. Here, <code class=\"language-text\">super.area</code> refers to the <code class=\"language-text\">area</code> getter method from the Rectangle class.</p>\n<hr>\n<p>class: center, middle, block-text</p>\n<h1>ES6 Modules</h1>\n<hr>\n<p>class: med</p>\n<p>For the longest time, NodeJS hacked around the idea of modules by implementing a <code class=\"language-text\">require</code> function. There was no 'standard' module spec for the language. ES6 changes all this with two new keywords: <code class=\"language-text\">import</code> and <code class=\"language-text\">export</code>.</p>\n<p>Exports and imports are fairly simple. A module (in practice, a file) can export any number of named variables, as well as a 'default' value. Then other modules can import those variables by name, or just import the default.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// myModule.js</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">var</span> size <span class=\"token operator\">=</span> <span class=\"token number\">14</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">let</span> color <span class=\"token operator\">=</span> <span class=\"token string\">'red'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token string\">'DefaultValue'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>size<span class=\"token punctuation\">,</span> color<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./myModule'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> name <span class=\"token keyword\">from</span> <span class=\"token string\">'./myModule'</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">,</span> color<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Prints 14, red, DefaultValue</span></code></pre></div>\n<p>Note the lack of curly braces when we import the default value.</p>\n<hr>\n<p>class: med-large</p>\n<p>We can also rename variables when we import them - we're not tied down to the names that the module authors used.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n    size <span class=\"token keyword\">as</span> bigness<span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">default</span> <span class=\"token keyword\">as</span> name\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./myModule'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Finally, if we just want to import everything, we can do that too:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> all <span class=\"token keyword\">from</span> <span class=\"token string\">'./myModule'</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>all<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// {size: 14, color: 'red', default: 'DefaultValue'}</span></code></pre></div>\n<hr>\n<p>class: med-large</p>\n<h1>Module Naming Conventions</h1>\n<p>It would be really cool if there were a 'standardized' way to refer to modules in ES6, but there isn't one. Importing from Node works pretty much the same way it did with <code class=\"language-text\">require</code>, but the browser plays by its own rules. It's best just to let Babel take care of such inconsistencies!</p>\n<hr>\n<p>class: large</p>\n<h1>You made it!</h1>\n<p>Congratulations! CIS 197 is over now, and you officially know JavaScript. I hope you all enjoyed the class as much as I enjoyed teaching it.</p>\n<p>Best of luck on your final projects, and let me know if you ever need anything - JavaScript related or otherwise!</p>","frontmatter":{"date":"January 29, 2019","path":"/lectures/11","title":"ES6","metaTitle":null}}},"pageContext":{}}}