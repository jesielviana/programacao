{"componentChunkName":"component---src-templates-markdown-js","path":"/lectures/4","result":{"data":{"markdownRemark":{"html":"<p>class: center, middle, block-text</p>\n<h1>Lecture 4</h1>\n<h2>HTML, CSS and jQuery</h2>\n<hr>\n<p>class: x-large</p>\n<h1>Agenda</h1>\n<ol>\n<li>HTML/CSS Basics</li>\n<li>Responsive CSS and Bootstrap</li>\n</ol>\n<hr>\n<p>class: center, middle, block-text</p>\n<h1>HTML</h1>\n<hr>\n<p>class: med-large</p>\n<h1>Browsers</h1>\n<p>Every browser has two main components:</p>\n<ol>\n<li>A <strong>rendering engine</strong> that parses HTML and CSS to display the information</li>\n<li>A <strong>JavaScript engine</strong> that interprets JS code in a sandboxed runtime</li>\n</ol>\n<p>The API is standardized across browsers - most R&#x26;D is done in performance. For example, <a href=\"https://blog.mozilla.org/blog/2013/03/27/mozilla-is-unlocking-the-power-of-the-web-as-a-platform-for-gaming/\">Mozilla has released a JavaScript engine that can run Quake at 60fps in the browser!</a></p>\n<hr>\n<p>class: med-large</p>\n<h1>HTML Basics</h1>\n<ul>\n<li>HTML = <strong>H</strong>yper <strong>T</strong>ext <strong>M</strong>arkup <strong>L</strong>anguage</li>\n<li>Files should start with <code class=\"language-text\">&lt;!DOCTYPE html&gt;</code></li>\n<li>\n<p>The document is a tree of opening and closing tags, with an <code class=\"language-text\">&lt;html&gt;</code> tag as the root</p>\n<ul>\n<li>Example of open/close tag pair: <code class=\"language-text\">&lt;div&gt;&lt;/div&gt;</code></li>\n<li>Open/close pairs may have text or more tags between them</li>\n<li>\n<p>Some tags are 'standalone' and don't need to be closed</p>\n<ul>\n<li>Ex.  <code class=\"language-text\">&lt;link&gt;, &lt;meta&gt;, &lt;img&gt;</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Tags can have <em>attributes</em>, like \"id\" or \"class\":</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>someClass<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>123456789<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  I'm some text inside of a div.\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n</li>\n</ul>\n<hr>\n<p>class: med-large</p>\n<h1>Bare-bones HTML Document</h1>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token doctype\">&lt;!DOCTYPE html></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>styles.css<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>CIS 197 JavaScript<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>Welcome to CIS 197<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>\n      This is a course about ...\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h2>.center[[View on JSFiddle](https://jsfiddle.net/dwf1sup1/)]</h2>\n<hr>\n<p>class: med-large</p>\n<h2>Tags you should know</h2>\n<ul>\n<li>Divs (<code class=\"language-text\">&lt;div&gt;</code>) divide the document into different sections.</li>\n<li>Headers (<code class=\"language-text\">&lt;h1&gt;</code>, <code class=\"language-text\">&lt;h2&gt;</code>, ...) are for section headers - including the overall page title.</li>\n<li>Paragraphs (<code class=\"language-text\">&lt;p&gt;</code>) break text into paragraphs.</li>\n<li>Line breaks (<code class=\"language-text\">&lt;br&gt;</code>) indicate line breaks.</li>\n<li>Anchor tags (<code class=\"language-text\">&lt;a&gt;</code>) are used for linking to other pages.</li>\n<li>Spans (<code class=\"language-text\">&lt;span&gt;</code>) denote text that's somehow different or important - like bolded text, or special characters.</li>\n<li>Image tags (<code class=\"language-text\">&lt;img&gt;</code>) do just what you'd expect - display images.</li>\n<li>Forms (<code class=\"language-text\">&lt;form&gt;</code>) are used for web forms, along with related tags like <code class=\"language-text\">&lt;input&gt;</code> and <code class=\"language-text\">&lt;textarea&gt;</code>.</li>\n</ul>\n<p><a href=\"https://jsfiddle.net/isibner/j5hwax07/\">Let's see how these look on JSFiddle.</a></p>\n<hr>\n<p>class: med-large</p>\n<h2>CSS: Making HTML Pretty</h2>\n<p>The HTML we've seen so far is pretty ugly - we need a way to change how it's displayed if we want to make a good-looking website. We can do this with CSS, which is yet <em>another</em> markup language that tells a browser how to display an HTML page.</p>\n<p>There are far too many CSS properties to give an exhaustive list here. <a href=\"https://developer.mozilla.org/en-US/\">MDN</a> has amazing resources for looking up specific properties, as always. We'll focus here on the <strong>structure</strong> of CSS, using a few basic properties as examples.</p>\n<hr>\n<p>class: large</p>\n<h2>CSS Basics</h2>\n<p>CSS works by applying <em>rules</em> to change the style of elements. Here's an example of a CSS rule:</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">strong</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The rule starts with a <em>selector</em>, <code class=\"language-text\">strong</code>, which indicates that it applies to <code class=\"language-text\">&lt;strong&gt;</code> elements. The bit inside the curly braces is the <em>declaration</em> - the body of the rule. The keyword <code class=\"language-text\">color</code> is a <em>property</em>, and <code class=\"language-text\">red</code> is a <em>value</em>. Semicolons are used to separate property-value pairs.</p>\n<hr>\n<p>class: med</p>\n<h2>Basic Selectors</h2>\n<p>The most basic CSS selector is the tag name. To make all body text black, for instance, you would do:</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">body</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> #000000<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The other basic selectors work on two special attributes: <strong>class</strong> and <strong>id</strong>.</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token comment\">/* Class selector */</span>\n<span class=\"token selector\">.red-text</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> #FF0000<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* ID selector */</span>\n<span class=\"token selector\">#blue-div</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> #0000FF<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<p>class: large</p>\n<h1>Laziness; Bootstrap</h1>\n<p>With time and perseverence, we could manually write the CSS required to make a website look great on all screen sizes. But this would take a very long time, and programmers are notoriously lazy.</p>\n<p>In practice, a \"mobile-first\" library like Bootstrap is used to speed up the development process.</p>\n<hr>\n<p>class: large</p>\n<h1>The Bootstrap grid</h1>\n<p>Bootstrap uses a grid system, implemented with media queries, to manage its responsive CSS. It's a simple way to make sure a screen is using all of its real estate to display the content. A three-column layout on a big screen becomes a two-column layout on a medium screen, and a one-column layout on a small screen.</p>\n<p><a href=\"http://getbootstrap.com/css/#grid\">The Bootstrap docs</a> have the best description of this system, and are definitely worth a look.</p>\n<hr>\n<p>class: large</p>\n<h1>Typography and Components</h1>\n<p>Frameworks like Bootstrap already have sane defaults for things like text size, font families, and basic components of a site (like headers and buttons). They also have a <a href=\"http://getbootstrap.com/components/\">ton of other components</a> that you can use to make a website look awesome.</p>\n<p>Now, if you don't write <em>any</em> CSS yourself, the site will look generic and generally pretty bad. Frameworks are meant to be used as a base - you still need to write a bit of CSS if you want to do anything interesting!</p>\n<hr>\n<p>class: center, middle, block-text</p>\n<h1>JavaScript in the Browser</h1>\n<hr>\n<p>class: x-large</p>\n<h1>Agenda</h1>\n<ol>\n<li>The DOM</li>\n<li>jQuery</li>\n<li>Browser Events</li>\n</ol>\n<hr>\n<p>class: med-large</p>\n<h1>Loading JavaScript</h1>\n<p>In Node, we used <code class=\"language-text\">require(&#39;module&#39;)</code> to load JavaScript files. In the browser, we need to use a special <code class=\"language-text\">&lt;script&gt;</code> tag.</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!-- content and stuff --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>path/to/script.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Browsers load tags sequentially, so it's good practice to put the script tags last. That way users will see the bare-bones HTML page more quickly.</p>\n<hr>\n<p>class: center, middle, block-text</p>\n<h1>The DOM</h1>\n<hr>\n<p>class: large</p>\n<h1>DOM Basics</h1>\n<ul>\n<li>DOM = <strong>D</strong>ocument <strong>O</strong>bject <strong>M</strong>odel</li>\n<li>\n<p>Tree of JavaScript objects representing the HTML document</p>\n<ul>\n<li>Called <em>DOM nodes</em></li>\n</ul>\n</li>\n<li>Allows you to dynamically change the page using JavaScript</li>\n</ul>\n<hr>\n<p>class: x-large</p>\n<p>.col1[</p>\n<h2>.center[HTML]</h2>\n<p><span></span></p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token doctype\">&lt;!DOCTYPE html></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>I'm a paragraph.<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>And I'm a div!<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>]</p>\n<p>.col2[</p>\n<h2>.center[DOM Tree]</h2>\n<img src=\"/~cis197/lectures/images/dom-tree.png\" style=\"width:100%\" alt=\"DOM tree\"/>\n]\n<hr>\n<p>class: large</p>\n<h1>Chrome Dev Tools</h1>\n<ul>\n<li>\n<p><kbd>Alt</kbd>  +  <kbd>⌘</kbd>  +  <kbd>j</kbd> in Chrome will let you access, visualize, and maniupulate the DOM</p>\n<ul>\n<li>You can also right click and hit 'Inspect Element' to go straight to a specific node</li>\n</ul>\n</li>\n<li>Other modern browsers have dev tools as well - get familiar with the toolset in your browser of choice, and you'll be able to debug a lot more effectively!</li>\n</ul>\n<hr>\n<p>class: large</p>\n<h2>The \"Vanilla DOM\"</h2>\n<p>There <em>is</em> a native DOM API, but it's notoriously verbose and annoying to work with. It's very uncommon to write DOM manipulation code without using a library.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> node <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>firstChild<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>nodeType <span class=\"token operator\">===</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Text node</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Content: '</span> <span class=\"token operator\">+</span> node<span class=\"token punctuation\">.</span>nodeValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Regular node</span>\n  <span class=\"token keyword\">var</span> n <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>childNodes<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Tag: &lt;'</span> <span class=\"token operator\">+</span> node<span class=\"token punctuation\">.</span>nodeName <span class=\"token operator\">+</span> <span class=\"token string\">'>'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Number of children: '</span> <span class=\"token operator\">+</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<p>class: center, middle, block-text</p>\n<h1>jQuery</h1>\n<h3>Or: The Almighty $</h3>\n<hr>\n<p>class: large</p>\n<h1>About jQuery</h1>\n<ul>\n<li>Optimized, abstracted DOM manipulation</li>\n<li>Intuitive API and method syntax</li>\n<li>Expressive syntax driven by CSS selectors</li>\n<li>Pretty good syntax for web requests</li>\n<li>Works in nearly all browsers</li>\n<li>Probably the most popular JavaScript library ever</li>\n</ul>\n<hr>\n<p>class: med-large</p>\n<h1>jQuery Objects</h1>\n<p>The basic currency of jQuery is a <strong>jQuery object</strong>, a wrapper for DOM nodes and allows you to efficiently manipulate them. You can find elements to make into a jQuery object by using CSS selectors.</p>\n<ol>\n<li><code class=\"language-text\">$(selector)</code> - searches the whole document for nodes that match the selector</li>\n<li><code class=\"language-text\">$someNodes.find(selector)</code> - only finds children of <code class=\"language-text\">$someNodes</code> that match the selector</li>\n</ol>\n<p>You can make a 'vanilla' DOM node into a jQuery object with <code class=\"language-text\">$(vanillaNode)</code>. In fact, jQuery does this internally; <code class=\"language-text\">$(selector)</code> is the same as calling <code class=\"language-text\">$(document).find(selector)</code>.</p>\n<hr>\n<p>class: med-large</p>\n<h1>jQuery Selector Examples</h1>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// ID</span>\n<span class=\"token keyword\">var</span> $myEl <span class=\"token operator\">=</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#myEl'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Tag name</span>\n<span class=\"token keyword\">var</span> $allTables <span class=\"token operator\">=</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'table'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Descendant of ID</span>\n<span class=\"token keyword\">var</span> $lessons <span class=\"token operator\">=</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#content .lesson'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Equivalently:</span>\n$lessons <span class=\"token operator\">=</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#content'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.lesson'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Pseudo-selectors</span>\n<span class=\"token keyword\">var</span> $oddInputs <span class=\"token operator\">=</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'input:odd'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<hr>\n<p>class: x-large, center, middle</p>\n<h1>Simple jQuery Example</h1>\n<p><a href=\"http://jsfiddle.net/webdevem/Q8KVC/\">http://jsfiddle.net/webdevem/Q8KVC/</a></p>\n<hr>\n<p>class: large</p>\n<h1>Creating Elements with jQuery</h1>\n<p>You can <em>create</em> elements with jQuery just by passing in an HTML tag string. For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">$span <span class=\"token operator\">=</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;span>'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token string\">'I am span.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n$myDiv<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>$span<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This is pretty cool because it allows you to build a page dynamically.</p>\n<hr>\n<p>class: center, middle, block-text</p>\n<h1>Browser Events</h1>\n<hr>\n<p>class: med-large</p>\n<h1>Browser Event Basics</h1>\n<ul>\n<li>User interactions are modelled with an <em>event-based</em> system; browsers have a JavaScript API to hook into these events.</li>\n<li>Just like the event listeners we looked a few weeks ago - functions are registered as <em>event listeners</em> and receive arguments with event information (e.g. which key was pressed).</li>\n<li>\n<p>Many different event types:</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en/DOM/MouseEvent\">Mouse</a>: <kbd>mousedown</kbd>, <kbd>mouseup</kbd>, <kbd>click</kbd>, <kbd>dblclick</kbd>, <kbd>mousemove</kbd>, <kbd>mouseover</kbd>, <kbd>mousewheel</kbd>, <kbd>mouseout</kbd>, <kbd>contextmenu</kbd></li>\n<li><a href=\"https://developer.mozilla.org/en/DOM/MouseEvent\">Touch</a>: <kbd>touchstart</kbd>, <kbd>touchmove</kbd>, <kbd>touchend</kbd>, <kbd>touchcancel</kbd></li>\n<li><a href=\"https://developer.mozilla.org/en/DOM/KeyboardEvent\">Keyboard</a>: <kbd>keydown</kbd>, <kbd>keypress</kbd>, <kbd>keyup</kbd></li>\n<li>Forms: <kbd>focus</kbd>, <kbd>blur</kbd>, <kbd>change</kbd>, <kbd>submit</kbd></li>\n<li>Window: <kbd>scroll</kbd>, <kbd>resize</kbd>, <kbd>hashchange</kbd>, <kbd>load</kbd>, <kbd>unload</kbd></li>\n</ul>\n</li>\n</ul>\n<hr>\n<p>class: large</p>\n<h1>Handlers in HTML</h1>\n<p>It's technically possible to define event handlers directly in your HTML like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">onclick</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>submitForm();<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  Submit\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>This is fine when there's only one simple event on a page - say, a login form with validation. It is <strong>not</strong> a good idea to do this in any other context; JavaScript code should stay in <code class=\"language-text\">.js</code> files, separate from the markup.</p>\n<hr>\n<p>class: med-large</p>\n<h1>Handlers in JavaScript</h1>\n<p>The event handler API is pretty easy to work with, even without jQuery. Don't worry, we'll get to jQuery in a few slides - but let's use the Vanilla DOM for a little while:</p>\n<p><code class=\"language-text\">domNode.addEventListener(eventType, eventListener);</code></p>\n<p>With this syntax, the submit button handler becomes:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> buttons <span class=\"token operator\">=</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByTagName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nbuttons<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">submitForm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<hr>\n<p>class: med-large</p>\n<h1>Event Objects</h1>\n<p>Event handlers are passed an <em>event object</em> with the properties of the relevant event. For example, a mouse event would have <code class=\"language-text\">clientX</code> and <code class=\"language-text\">clientY</code> properties indicating the mouse coordinates.</p>\n<p>Many events also have a <code class=\"language-text\">target</code> property containing the triggering DOM node, which makes it much easier to reuse listeners.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">document<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'X: '</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span>clientX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Y: '</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span>clientY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Target: '</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<hr>\n<p>class: med-large</p>\n<h1>Cross-Browser Sadness</h1>\n<p>IE8 and below use a completely different API for attaching events:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">domNode<span class=\"token punctuation\">.</span><span class=\"token function\">attachEvent</span><span class=\"token punctuation\">(</span><span class=\"token string\">'onclick'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// do stuff</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Plus, the callback gets no event object - the properties are attached to a <strong>global event object</strong> called <code class=\"language-text\">window.event</code>.</p>\n<p>If only there were a better, cross-browser way...</p>\n<hr>\n<p>class: med-large</p>\n<h1>Events with jQuery</h1>\n<p>Once again, jQuery provides a convenient solution to a DOM-related problem. You can bind handlers to jQuery objects using methods corresponding to the event type: <code class=\"language-text\">click(), mousein(), keyup()...</code></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Triggering node passed as \"this\" context</span>\n  <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hovered'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<hr>\n<p>class: large</p>\n<h1>jQuery Event Objects</h1>\n<p>jQuery event objects have all the same objects as the standard DOM events. However, they're now standardized across browsers, which is very convenient.</p>\n<p>Also, in jQuery events, the triggering node is available as <code class=\"language-text\">this</code>, which is quite useful.</p>\n<hr>\n<p>class: med-large</p>\n<h1>Propagation (Bubbling)</h1>\n<p>Events don't stop on the initially-triggering element. They \"bubble up,\" or propagate, up the DOM tree until they get to the root (<code class=\"language-text\">document</code>). Consider the example of clicking one of the links in the HTML below:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>/foo<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>foo<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>/bar<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>bar!<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>The <code class=\"language-text\">&lt;a&gt;</code> <kbd>click</kbd> handlers will run first, followed by <code class=\"language-text\">&lt;body&gt;</code> handlers, and finally <code class=\"language-text\">document</code> handlers - one of which follows the link.</p>\n<hr>\n<p>class: large</p>\n<h1>Stopping Propagation</h1>\n<p>You can call <code class=\"language-text\">event.preventDefault()</code> to ignore only the browser-specific functionality (like navigating to a page), or <code class=\"language-text\">event.stopPropagation()</code> to stop the bubbling entirely.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Prevent users from clicking links to navigate</span>\n<span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  e<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><a href=\"https://jsfiddle.net/8389r5k3/3/\">Live example</a></p>\n<hr>\n<p>class: med-large, shrink-top</p>\n<h1>Advanced jQuery Events</h1>\n<p>The <code class=\"language-text\">on()</code> method is a more general way of handling jQuery events. The simplest version you've seen before: it registers a listener for a given name. But there is also a three-argument version, which runs the listener when <strong>any matching descendent</strong> of the parent node receives the event.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Run handler on existing matching elements</span>\n<span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#menu .option'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hover'</span><span class=\"token punctuation\">,</span> onHover<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Run handler on any children of #menu</span>\n<span class=\"token comment\">// that match the selector</span>\n<span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#menu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hover'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.option'</span><span class=\"token punctuation\">,</span> onHover<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Run handler on any nodes in the entire document</span>\n<span class=\"token comment\">// which match the selector</span>\n<span class=\"token function\">$</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hover'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'#menu .option'</span><span class=\"token punctuation\">,</span> onHover<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<hr>\n<p>class: med-large, shrink-top</p>\n<h1>Document Ready Event</h1>\n<p>After a browser parses an HTML document, it must do work to lay out elements on the page. There's a delay (only a few milliseconds) between content first <em>appearing</em> and the DOM <em>actually</em> being ready. If your JavaScript tries to manipulate the page before it's ready, it won't work!</p>\n<p>Your best bet, again, is to use jQuery to hook into the document's ready state event:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">$</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ready</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Do stuff</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Equivalent, preferred syntax</span>\n<span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Do stuff</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<hr>\n<p>class: large</p>\n<h1>Up Next</h1>\n<ul>\n<li>\n<p>Homework 4 - Pokémon Map Builder</p>\n<ul>\n<li>HTML/CSS, DOM, jQuery, and events</li>\n<li>Due next Sunday at 11:59pm!</li>\n<li>One of the most fun homeworks - but start early!</li>\n<li>Come to office hours!</li>\n</ul>\n</li>\n</ul>","frontmatter":{"date":"January 29, 2019","path":"/lectures/4","title":"HTML, CSS and jQuery","metaTitle":null}}},"pageContext":{}}}