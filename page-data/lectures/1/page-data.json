{"componentChunkName":"component---src-templates-markdown-js","path":"/lectures/1","result":{"data":{"markdownRemark":{"html":"<p>class: center, middle, block-text</p>\n<h1>Lecture</h1>\n<h2>JavaScript Basics and Syntax</h2>\n<hr>\n<p>name: types\nclass: large</p>\n<h1>Literals</h1>\n<ol>\n<li>Numbers:<code class=\"language-text\">1, 2, 3, 1.28e4, NaN, Infinity</code></li>\n<li>Strings: <code class=\"language-text\">&#39;xyz&#39;, &#39;foo \\n&#39;, &#39;\\u2603&#39;</code></li>\n<li>Boolean: <code class=\"language-text\">true, false</code></li>\n<li>Array: <code class=\"language-text\">[1, 2, &#39;ham&#39;, &#39;spam&#39;]</code></li>\n<li>Objects: <code class=\"language-text\">{course: &#39;CIS 197&#39;, title: &#39;JavaScript&#39;}</code></li>\n<li>\n<p>Functions:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">square</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> x <span class=\"token operator\">*</span> x<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ol>\n<hr>\n<p>class: large</p>\n<h1>Operators</h1>\n<ol>\n<li>Arithmetic:<code class=\"language-text\">+, -, *, /, %</code></li>\n<li>Comparison: <code class=\"language-text\">&lt;, &lt;=, &gt;, &gt;=, ==, ===, !=, !==</code></li>\n<li>Logical: <code class=\"language-text\">&amp;&amp;, ||, !</code></li>\n<li>Concatenation: <code class=\"language-text\">+</code></li>\n<li>Bitwise: <code class=\"language-text\">&amp;, |, ~</code> (just fyi)</li>\n</ol>\n<hr>\n<p>class: med-large</p>\n<h1>Exercise #1: typeof</h1>\n<p>As the name would imply, the <code class=\"language-text\">typeof</code> function returns the type of the variable passed into it.</p>\n<p>In your REPL, run the <code class=\"language-text\">typeof</code> function on <code class=\"language-text\">1</code>, <code class=\"language-text\">&#39;string&#39;</code>, <code class=\"language-text\">{ &#39;thisIs&#39;: &#39;anObject&#39; }</code>, <code class=\"language-text\">[1,2,3]</code></p>\n<p>Example function call syntax for typeof</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token string\">'string'</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">...</span></code></pre></div>\n<h3>What do you get for the \"array\"?</h3>\n<hr>\n<p>class: med-large</p>\n<h1>Gotcha</h1>\n<p>Arrays are technically objects. Keep this in mind for this homework and future ones as well. We can test for arrays explicitly using <code class=\"language-text\">Array.isArray(passInTheArrayHere)</code>.</p>\n<p>We will get into this more formally during object oriented JS. But know that there is an <code class=\"language-text\">Array</code> constructor that <code class=\"language-text\">[1,2,...]</code> syntax is hiding with syntactic sugar.</p>\n<hr>\n<p>class: med-large</p>\n<h1>Numbers</h1>\n<ul>\n<li>Stored internally as a 64-bit value (like Java's <code class=\"language-text\">double</code> type)</li>\n<li>\n<p><code class=\"language-text\">NaN</code> represents a non-number result</p>\n<ul>\n<li>For example, <code class=\"language-text\">Number(&#39;xyz&#39;)</code> returns <code class=\"language-text\">NaN</code></li>\n<li><em>CANNOT</em> be compared using equality operators – <br>\nonly <code class=\"language-text\">Number.isNaN()</code> may be used</li>\n</ul>\n</li>\n<li><code class=\"language-text\">Infinity</code> represents all numbers larger than <code class=\"language-text\">Number.MAX_VALUE</code></li>\n</ul>\n<hr>\n<p>class: med-large</p>\n<h1>Strings</h1>\n<ul>\n<li>\n<p>Strings can be written with single quotes or double quotes. <strong>Use single quotes</strong> - it's bad style to mix them.</p>\n<ul>\n<li><em>Exception</em>: Strings like <code class=\"language-text\">&quot;I don&#39;t like double quotes&quot;</code> that have single quotes inside them</li>\n</ul>\n</li>\n<li>Escape characters use backslash, like Java: <code class=\"language-text\">&#39;\\n \\t \\\\&#39;</code></li>\n<li>\n<p>Strings are <em>immutable</em> - once created, you can't change them</p>\n<ul>\n<li>Concatenating them with the <code class=\"language-text\">+</code> operator returns a new string</li>\n</ul>\n</li>\n<li>No <code class=\"language-text\">char</code> type - just use strings of length 1</li>\n<li>\n<p>Many useful methods/properties – <code class=\"language-text\">.length, substring(), toLowerCase(), toUpperCase()</code> ...</p>\n<ul>\n<li>See the full list in the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String\">MDN string documentation</a></li>\n</ul>\n</li>\n</ul>\n<hr>\n<p>class: med-large</p>\n<h1>Booleans</h1>\n<ul>\n<li><code class=\"language-text\">true</code> and <code class=\"language-text\">false</code></li>\n<li>\n<p>Standard logical operators (<code class=\"language-text\">&amp;&amp;, ||, !</code>)</p>\n<ul>\n<li>Also bitwise operators (<code class=\"language-text\">&amp;, |, ~</code>) - <em>don't use these!</em> (well...you can if you know what you're doing)</li>\n</ul>\n</li>\n</ul>\n<hr>\n<p>class: med-large</p>\n<h1>Quick Aside</h1>\n<p>JavaScript is weakly typed - you can use ANY value with a logical operator (fun...right?)</p>\n<ul>\n<li><em>Falsy</em> values: <code class=\"language-text\">false, null, undefined, 0, NaN, &#39;&#39;</code></li>\n<li>Any other value is <em>truthy</em> (including <code class=\"language-text\">&#39;false&#39;, [], {}</code>)</li>\n</ul>\n<hr>\n<p>class: small</p>\n<h1>Equality and Coercion</h1>\n<ul>\n<li><code class=\"language-text\">==</code> vs <code class=\"language-text\">===</code></li>\n<li>Rule of thumb, use <code class=\"language-text\">===</code></li>\n<li>\n<p>Why?</p>\n<ul>\n<li><code class=\"language-text\">==</code> is <em>abstract equality comparison</em></li>\n<li>Will try and coerce both sides to the same type and make a comparison</li>\n<li><code class=\"language-text\">===</code> is the <em>strict equality comparison</em></li>\n<li>Won't attempt to coerce both sides to do a comparison. Just compares as is</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"3\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true.</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"3\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false.</span></code></pre></div>\n<ul>\n<li><em>But</em> when talking about objects both <code class=\"language-text\">==</code> and <code class=\"language-text\">===</code> will return <code class=\"language-text\">false</code> unless both sides refer to the exact same object.</li>\n</ul>\n<hr>\n<p>class: med-large</p>\n<h1>Arrays</h1>\n<ul>\n<li>Literal notation uses square brackets: <code class=\"language-text\">[&#39;foo&#39;, &#39;bar&#39;, baz&#39;]</code></li>\n<li>\n<p>Can be heterogenous: <code class=\"language-text\">[&#39;foo&#39;, 1, true]</code> is valid</p>\n<ul>\n<li>Contrast with Java, where elements must have the same type</li>\n</ul>\n</li>\n<li>Elements accessed with square bracket notation: <code class=\"language-text\">arr[0]</code></li>\n<li>Because arrays are instances of objects, they are passed referentially to functions!</li>\n<li>\n<p>Convenience methods like <code class=\"language-text\">push(), pop(), slice(), shift(), unshift()</code></p>\n<ul>\n<li>See the full list in the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\">MDN Array documentation</a></li>\n</ul>\n</li>\n</ul>\n<hr>\n<p>class: med-large</p>\n<h2>Objects</h2>\n<ul>\n<li>Lightweight, mutable key-value stores</li>\n<li>Literal notation uses curly braces: <code class=\"language-text\">{foo: &#39;bar&#39;, &#39;baz&#39;: 2}</code></li>\n<li>Property names can be strings: <code class=\"language-text\">{&#39;foo&#39;: &#39;bar&#39;}</code></li>\n<li>Access with <code class=\"language-text\">obj.propertyName</code> <strong>or</strong> <code class=\"language-text\">obj[&#39;propertyName&#39;]</code></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    someProperty<span class=\"token operator\">:</span> <span class=\"token string\">'abcdef'</span><span class=\"token punctuation\">,</span>\n    nestedObject<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> a<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> c<span class=\"token operator\">:</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">func</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  obj<span class=\"token punctuation\">.</span>someProperty        <span class=\"token comment\">// --> 'abcdef'</span>\n  obj<span class=\"token punctuation\">[</span><span class=\"token string\">'nestedObject'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>a   <span class=\"token comment\">// --> 1</span></code></pre></div>\n<hr>\n<p>class: med-large</p>\n<h1>Functions</h1>\n<ul>\n<li>First-class JS object (this allows JavaScript to take advantage of functional programming techniques)</li>\n<li>\n<p>Functions can return a value with the <code class=\"language-text\">return</code> keyword</p>\n<ul>\n<li>If no value is returned, then the function returns <code class=\"language-text\">undefined</code></li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">square</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> x <span class=\"token operator\">*</span> x<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<p>class: med-large</p>\n<h1>Defining Functions</h1>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Name</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">params</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// function body with optional return</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>Excluding the name makes a function anonymous.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">anonymous</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> x<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>If you name the function, it gives you more informational stack traces in the event of errors.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">dblFunc</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Double</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> x<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<p>class: large</p>\n<h1>Functions vs Calls</h1>\n<p>Don't get confused about the difference between a function call and the function itself! Remember, the call will always end with some parentheses.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">square</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> x <span class=\"token operator\">*</span> x<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>square<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// function</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">square</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// function call</span></code></pre></div>\n<hr>\n<p>class: large</p>\n<h1>Loops</h1>\n<h2>For loop</h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">Infinity</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'nihar is cool af'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>While loop</h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> niharIsCool <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>niharIsCool<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'nihar is cool af'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<p>class: med-large</p>\n<h1>Hoisting</h1>\n<p>Before JavaScript executes a function, it looks for all <code class=\"language-text\">var</code> declarations within the current scope. It then <em>declares</em> all those variables but doesn't assign them (effectively executing the statement <code class=\"language-text\">var foo;</code> at the top of the function). Only then does the function block get executed. Assignment of a variable occurs when the function execution reaches the line where you actually assign a variable.</p>\n<hr>\n<p>class: med-large</p>\n<h1>Fun with Hoisting</h1>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> foo <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">show</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> foo <span class=\"token operator\">=</span> <span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Declaring <code class=\"language-text\">var foo</code> causes <code class=\"language-text\">foo</code> to be shadowed for the <code class=\"language-text\">console.log()</code> statement – even though this is clearly not the intention!</p>\n<hr>\n<p>class: med-large</p>\n<h1>Behind the scenes</h1>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> foo<span class=\"token punctuation\">;</span> <span class=\"token comment\">// hoist foo to top, undefined as of now</span>\n<span class=\"token keyword\">var</span> foo <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// we define foo...in this scope</span>\n\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">show</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> foo<span class=\"token punctuation\">;</span> <span class=\"token comment\">// hoist foo *IN THIS SCOPE* to the top</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// --> undefined</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> foo <span class=\"token operator\">=</span> <span class=\"token number\">123</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// now we define it...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<hr>\n<p>class: med-large</p>\n<h1>Fixed Version</h1>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> foo <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">show</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// --> \"100\"</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    foo <span class=\"token operator\">=</span> <span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<hr>\n<p>class: med-large</p>\n<h1>Fixed behind the scenes</h1>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// same as before</span>\n<span class=\"token keyword\">var</span> foo <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">show</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ah now we don't have any new var declarations</span>\n  <span class=\"token comment\">// so we'll just default to parent scopes</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// --> \"100\" (from parent)</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    foo <span class=\"token operator\">=</span> <span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<hr>\n<p>class: small</p>\n<h1>Exercise #2</h1>\n<p>Do you know what value will be alerted if the following is executed as a JavaScript program?</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> foo <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>foo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> foo <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<hr>\n<p>That previous one outputs 10</p>\n<p>How about this one?</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Try it out for yourself. An important thing to note here is that functions that are defined in the syntax form <code class=\"language-text\">function a() {}</code> are hoisted <em>in their entirity</em> to the top of that scope.</p>\n<p>Here <code class=\"language-text\">function a() {}</code> within <code class=\"language-text\">b()</code> is hoisted to the top, so the <code class=\"language-text\">a=10</code> assignment is just redefining the function <code class=\"language-text\">a</code> within <code class=\"language-text\">b</code> but not the <code class=\"language-text\">var a</code> in the parent scope</p>\n<hr>\n<p>class: large</p>\n<h1>Closures</h1>\n<p>Variables stay in scope when you create a nested function. For example, the variable <code class=\"language-text\">x</code> below is still available in the function <code class=\"language-text\">y</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">someFun</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">y</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">y</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">someFun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// --> 123</span></code></pre></div>\n<hr>\n<p>class: med-large</p>\n<h1>Closures, continued</h1>\n<p>Closures are very useful for creating private state - variables that are not acccessible by any outside code. For instance, here's how we'd use a closure to write a counting function:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">createCounter</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> count<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> counter <span class=\"token operator\">=</span> <span class=\"token function\">createCounter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">counter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// --> 1</span>\n<span class=\"token function\">counter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// --> 2</span></code></pre></div>\n<hr>\n<p>class: center, middle, block-text</p>\n<h1>Objects and <code class=\"language-text\">this</code></h1>\n<hr>\n<p>class: med-large</p>\n<h1>Everything is an Object</h1>\n<ul>\n<li>\n<p>Aside from the primitive types (String, boolean, and Number) - everything in JS is a kind of object</p>\n<ul>\n<li>Even primitives can behave like objects (Strings, for example, have properties/methods)</li>\n</ul>\n</li>\n<li>Array is an object with integer keys and specific methods (e.g. <code class=\"language-text\">splice(), indexOf()</code>)</li>\n<li>\n<p>Functions are also object-like, and can have properties and methods</p>\n<ul>\n<li>Can be thought of as <em>executable objects</em></li>\n</ul>\n</li>\n</ul>\n<hr>\n<p>class: large</p>\n<h1>The Global Object</h1>\n<ul>\n<li>The highest-level parent entity</li>\n<li>If a function isn't assigned to an object, then its <code class=\"language-text\">this</code> context will be the <em>global object</em> (<code class=\"language-text\">window</code> in a browser, <code class=\"language-text\">global</code> in Node).</li>\n<li>If a variable isn't declared within a function, it is assigned to the <em>global object</em></li>\n</ul>\n<hr>\n<p>class: med-large</p>\n<h2>Scoping - or, Always Use Var</h2>\n<ul>\n<li>\n<p>Declaring a variable without <code class=\"language-text\">var</code> assigns it to the <strong>global object</strong> - <code class=\"language-text\">window</code> in the browser, <code class=\"language-text\">global</code> in Node</p>\n<ul>\n<li>Declaring a variable <strong>with</strong> <code class=\"language-text\">var</code>, at the top level, also assigns to the global object...</li>\n</ul>\n</li>\n<li>This is generally not what you want, and can cause issues.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">i <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// later, in another file</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 'i' unintentionally overridden!</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<p>class: med-large</p>\n<h1>Using <code class=\"language-text\">this</code></h1>\n<ul>\n<li>If a function is a property on an object, then we can access the parent object from within that function using <code class=\"language-text\">this</code>. Simple!</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  prop<span class=\"token operator\">:</span> <span class=\"token string\">'I am a property.'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">printProp</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>prop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nobj<span class=\"token punctuation\">.</span><span class=\"token function\">printProp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// --> 'I am a property.'</span></code></pre></div>\n<hr>\n<p>class: large</p>\n<p>Since functions are objects, you might be wondering what happens if we reference <code class=\"language-text\">this</code> inside a function object itself.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">func</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [LOTS OF TEXT]</span></code></pre></div>\n<p>So what does <code class=\"language-text\">func()</code> actually return?</p>\n<hr>\n<p>class: med-large</p>\n<h2>Diagnosing Global Object Errors</h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> numberPrinter <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  num<span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">print2xNum</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">doubleThisNum</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>num<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">doubleThisNum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nnumberPrinter<span class=\"token punctuation\">.</span><span class=\"token function\">print2xNum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// --> NaN</span></code></pre></div>\n<p>We wanted <code class=\"language-text\">2 * 3</code> -- what's going on here?</p>\n<hr>\n<p>class: med-large</p>\n<h2>Solution</h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> numberPrinter <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  num<span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">print2xNum</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> printer <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// new</span>\n    <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">doubleThisNum</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> printer<span class=\"token punctuation\">.</span>num<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">doubleThisNum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nnumberPrinter<span class=\"token punctuation\">.</span><span class=\"token function\">print2xNum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// --> 6</span></code></pre></div>\n<hr>\n<p>class: large</p>\n<p>Often, you'll see <code class=\"language-text\">var self = this;</code> - which can be hard to read when it's overused. It's better to name the variable something that reflects its type (like <code class=\"language-text\">printer</code> in the previous example).</p>\n<hr>\n<h1>Even better solution</h1>\n<p>Use the built-in <code class=\"language-text\">Function.bind()</code> to manually assign the internal function the correct <code class=\"language-text\">this</code> context!</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> numberPrinter <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  num<span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">print2xNum</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">doubleThisNum</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>num<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// new</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">doubleThisNum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nnumberPrinter<span class=\"token punctuation\">.</span><span class=\"token function\">print2xNum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// --> 6</span></code></pre></div>\n<hr>\n<h1>JavaScript Modules</h1>\n<p>file1.js</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">12</span>\n<span class=\"token comment\">// module.exports is what can</span>\n<span class=\"token comment\">// be imported from this file elsewhere</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> x</code></pre></div>\n<p>file2.js</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> file1var <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./file1'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// --> no '.js'</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span> <span class=\"token punctuation\">(</span>file1var<span class=\"token punctuation\">)</span> <span class=\"token comment\">// --> 12</span></code></pre></div>\n<!--\n\nclass: center, middle, block-text\n\n# NPM (Node Package Manager)\n\n# ---\n\nclass: med-large\n\n# Node Modules\n\n* In Node, dependencies are represented as [*modules*](http://\n.org/api/modules.html#modules_module_require_id)\n* Each file gets a `module` object representing the current module (duh)\n  - Properties: `module.exports, module.require(), module.id, module.filename, module.loaded, module.parent, module.children`\n\n```js\n// myModule.js\nvar foo = [1, 2, 3, 4];\n\nmodule.exports = foo;\n// or, equivalently\nexports = foo;\n```\n\n# ---\n\nclass: med-large\n\n# Node Packages\n\n* Each NPM package is a folder representing a Node module\n  - Hence the directory name: `node_modules`\n* Each module has a `package.json` file with meta-information about the package\n  - Including the main file to load with `require()`\n* Packages are installed with `npm install package-name`\n  - `npm install` installs dependencies from `package.json`\n  - `npm install -g` installs a *global package*\n  - `npm install --save` writes the package into the local `package.json` as a dependency\n\n# ---\n\nclass: med-large\n\n# Load Order\n`require('X')` from module at path Y.\n\n```\n1. If X is a core module, then return X.\n2. If X begins with './', '/', or '../'\n  1. If X is a file, then load Y + X as a file.\n      * \"X.json\" → object\n      * \"X.node\" → binary add-ons\n      * \"X.js\" or \"X\" → JavaScript file\n  2. If X is a directory, then load Y + X as a directory.\n      * If \"X/package.json\" exists and has a \"main\" field,\n        then load that file.\n      * Else try to load \"X/index.js\", \"X/index.json\",\n        and \"X/index.node\" (in that order).\n3. Try loading X using LOAD_NODE_MODULES.\n4. Throw a \"Not Found\" error.\n```\n\n# ---\n\nclass: med-large\n\n# Loading Order, Part II\n\nAgain, `require('X')` from path Y.\n\n```\nfunction LOAD_NODE_MODULES:\n1. let PARTS = split_directory_path(Y)\n2. let IDX = PARTS.length - 1\n3. while IDX >= 0:\n  1. if PARTS[IDX] == \"node_modules\" then continue\n  2. let DIR = join_path(PARTS[0 ... IDX] + \"node_modules\")\n      * Try loading \"DIR/X\" as a file\n      * Try loading \"DIR/X\" as a directory\n  3. let IDX = IDX - 1\n```\n\n**TAKEAWAY:** Node will attempt to load up the directory chain if it doesn't find a module locally. It will bubble all the way up to your global NPM folder (`~/node_modules`) &mdash; which can cause unexpected behavior.\n\n# ---\n\nclass: center, middle, block-text\n\n# WTF JavaScript\n\n# ---\n-->\n<hr>\n<p>class: center, middle</p>\n<h1><a href=\"https://www.destroyallsoftware.com/talks/wat\">WAT</a></h1>\n<hr>\n<p>class: med-large</p>\n<h1>We should talk about that...</h1>\n<p>But maybe we won't have enough time:</p>\n<p><a href=\"https://gist.github.com/abhisuri97/da6b6a7d584d192dfd65456fcf92e8a6\">https://gist.github.com/abhisuri97/da6b6a7d584d192dfd65456fcf92e8a6</a></p>\n<hr>\n<p>class: center, middle</p>\n<h1>Extended Memery</h1>\n<iframe width=\"760\" height=\"410\" src=\"//www.youtube.com/embed/et8xNAc2ic8\" frameborder=\"0\" allowfullscreen></iframe>\n<hr>\n<p>class: x-large</p>\n<h1>Next time:</h1>\n<p>Callbacks and asynchronous programming</p>","frontmatter":{"date":"January 29, 2019","path":"/lectures/1","title":"JavaScript Basics and Syntax","metaTitle":null}}},"pageContext":{}}}