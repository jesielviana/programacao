{"componentChunkName":"component---src-templates-markdown-js","path":"/lectures/2","result":{"data":{"markdownRemark":{"html":"<p>class: center, middle, block-text</p>\n<h1>Lecture 2</h1>\n<h2>Callbacks, Events, and Asynchronous Programming</h2>\n<hr>\n<p>class: medium</p>\n<h2><code class=\"language-text\">console.log(&#39;pre lecture logistics&#39;)</code></h2>\n<ul>\n<li><code class=\"language-text\">&lt;plug&gt;</code>Penn Labs, Penn Tech Review<code class=\"language-text\">&lt;/plug&gt;</code></li>\n<li>Office Hours finalized</li>\n<li>Waitlist is wild, still resolving</li>\n<li>\n<h2>Poll for homework/submission issues?</h2>\n</li>\n</ul>\n<p>class: medium</p>\n<h1><a href=\"https://www.destroyallsoftware.com/talks/wat\">WAT</a></h1>\n<hr>\n<p>class: med-large</p>\n<h1>Agenda</h1>\n<ul>\n<li>How JS processes functions that take a long time</li>\n<li>Understanding callbacks &#x26; \"callback hell\"</li>\n<li>How we can use the <code class=\"language-text\">async</code> library to avoid that</li>\n<li>Diving into promises</li>\n<li>\n<h2>If there is time: async/await</h2>\n<p>class: med-large</p>\n</li>\n</ul>\n<h2>I've hear about these callback things?</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Usage: callbackFn takes `user` as first argument</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">getUserFromDatabase</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">userId<span class=\"token punctuation\">,</span> callbackFn</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// some code that takes a while</span>\n  <span class=\"token comment\">// gets user from database</span>\n  <span class=\"token function\">callbackFn</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<p>class: med-large</p>\n<h2>But how do we use it?</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> userId<span class=\"token operator\">=</span><span class=\"token number\">1234</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">cb</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  user<span class=\"token punctuation\">.</span>pets<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Doggo'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">getUserFromDatabase</span><span class=\"token punctuation\">(</span>userId<span class=\"token punctuation\">,</span> cb<span class=\"token punctuation\">)</span></code></pre></div>\n<hr>\n<p>class: med-large</p>\n<h2>OR</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> userId<span class=\"token operator\">=</span><span class=\"token number\">1234</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">getUserFromDatabase</span><span class=\"token punctuation\">(</span>userId<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  user<span class=\"token punctuation\">.</span>pets<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Doggo'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<hr>\n<p>class: med-large</p>\n<h2>I've hear about these callback things?</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">asyncFunction</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">param1<span class=\"token punctuation\">,</span> param2<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">,</span> callbackFn</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// some code that takes a while does stuff</span>\n  <span class=\"token comment\">// and produces a result</span>\n  <span class=\"token function\">callbackFn</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<p>class: med-large</p>\n<p>Question:</p>\n<h2>So what's async about this?</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> userId<span class=\"token operator\">=</span><span class=\"token number\">1234</span>\n<span class=\"token function\">getUserFromDatabase</span><span class=\"token punctuation\">(</span>userId<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  user<span class=\"token punctuation\">.</span>pets<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Doggo'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> user2Id<span class=\"token operator\">=</span><span class=\"token number\">5678</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>What exactly is happening <em>in your app</em> while <code class=\"language-text\">getUserFromDatabase</code> is running?</p>\n<hr>\n<p>class: med-large</p>\n<h1>In most languages...nothing</h1>\n<ul>\n<li>\n<p>Java, Python, etc. by default wait for every line to finish executing before going onto the next one</p>\n<ul>\n<li>Blocking architecture.</li>\n<li>What are some disadvantages to that?</li>\n<li>How do people get around that? And what are the issues around doing those methods to get around blocking constraints?</li>\n</ul>\n</li>\n<li>\n<p>As you can probably guess (based on previous trends), JavaScript likes to be the odd one out</p>\n<ul>\n<li>\n<h2>Nonblocking</h2>\n</li>\n</ul>\n</li>\n</ul>\n<p>class: med-large</p>\n<p>Question:</p>\n<h2>We return</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> userId<span class=\"token operator\">=</span><span class=\"token number\">1234</span>\n<span class=\"token function\">getUserFromDatabase</span><span class=\"token punctuation\">(</span>userId<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  user<span class=\"token punctuation\">.</span>pets<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Doggo'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> user2Id<span class=\"token operator\">=</span><span class=\"token number\">5678</span><span class=\"token punctuation\">;</span></code></pre></div>\n<hr>\n<p>class: center, middle, block-text\n<code class=\"language-text\">Me:</code> JavaScript...what are you?</p>\n<p> <code class=\"language-text\">JavaScript:</code> I'm a single-threaded non-blocking asynchronous concurrent language</p>\n<p> <code class=\"language-text\">Me:</code> <iframe src=\"https://giphy.com/embed/4pMX5rJ4PYAEM\" width=\"300\" height=\"200\" frameBorder=\"0\" class=\"giphy-embed\" allowFullScreen></iframe><p><a href=\"https://giphy.com/gifs/homer-simpson-the-simpsons-bush-4pMX5rJ4PYAEM\">via GIPHY</a></p></p>\n<p> <code class=\"language-text\">JavaScript:</code> I have a call stack, an event loop, a callback queue, and some other apis and stuff</p>\n<h2><code class=\"language-text\">Me:</code> Ah...when are your office hours?</h2>\n<p>class: med-large</p>\n<h1>What is asynchronous programming?</h1>\n<p>So far, most (if not all) of the programs you've written are <em>synchronous programs</em>. You write code, and each line is executed one after another.</p>\n<p>However, this isn't a good model for situations where you need to wait for something to happen, or when you want two things to happen at once. In that case, you need <em>asynchronous programming</em>. This is surprisingly common:</p>\n<ul>\n<li>User clicking on a button</li>\n<li>Making an HTTP request to a website</li>\n<li>Fetching data from a database</li>\n</ul>\n<hr>\n<p>class: large</p>\n<h1>JavaScript is built for async</h1>\n<p>Thanks to its functional nature, JavaScript makes asynchronous programming pretty easy. We can bind functions to asynchronous calls, then handle the data we get back.</p>\n<p>The simplest unit of async control flow is a <strong>callback</strong>. We'll get to that later, but a brief bit about the JS environment</p>\n<hr>\n<p>class: medium</p>\n<h3>Call Stack, Web APIs, Callback Queue, and what exactly is Synchronous and Asynchronous</h3>\n<ul>\n<li>Synchronous Example:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">sync</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'first'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'second'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">sync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// -> what does this output?</span></code></pre></div>\n<ul>\n<li>Asynchronous Example:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">async</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'first'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'i was running late'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'second'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">async</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// -> how about now?</span></code></pre></div>\n<hr>\n<p>class: med-large</p>\n<h2>Let's talk call stacks</h2>\n<ul>\n<li><a href=\"http://latentflip.com/loupe/?code=dmFyIGEgPSBmdW5jdGlvbigpIHsKICBjb25zb2xlLmxvZygnZmlyc3QnKTsKICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgeyAKICAgIGNvbnNvbGUubG9nKCdpIHdhcyBydW5uaW5nIGxhdGUnKTsKICB9LCA1MDAwKTsKICBjb25zb2xlLmxvZygnc2Vjb25kJyk7Cn07CmEoKTs%3D!!!PGJ1dHRvbj5DbGljayBtZSE8L2J1dHRvbj4%3D\">Demo</a></li>\n<li>Anytime a JS function is called, it is added to the callstack. That call stack will process functions until there are none left.</li>\n<li>If that function being processed is a WebAPI or C++ API function (e.g. setTimeout, AJAX requests, etc), that function is called off the call stack, handled by the web API and inserted into a task queue.</li>\n<li>\n<p>There is a constantly running event loop that checks to see if the call stack is empty.</p>\n<ul>\n<li>\n<h2>If it is, it will remove elements from the task queue (FIFO style)</h2>\n</li>\n</ul>\n</li>\n</ul>\n<p>class: med-large</p>\n<h1>What'll happen here?</h1>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'woah'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">&lt;</span> <span class=\"token number\">10000000000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  x <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<p>class: med-large</p>\n<h1>What is a callback?</h1>\n<p>A callback is a function that's bound to a single asynchronous call. It is passed as an argument to another function, with the expectation that it will be executed once some async task is finished.</p>\n<p>Here's a very simple example using the built-in <code class=\"language-text\">setTimeout</code> function. It runs its callback after waiting a specified amount of time.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">cb</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'callback ran!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// wait 500ms, then run the callback</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>cb<span class=\"token punctuation\">,</span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// --> 'callback ran!'</span></code></pre></div>\n<hr>\n<p>class: med-large</p>\n<h1>Node-Style Callbacks</h1>\n<ul>\n<li>\n<p>Since so many operations rely on callbacks, a standard callback style has emerged in NodeJS:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">cb</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> results<span class=\"token operator\">...</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">err</code> contains an error, if one occurred; otherwise it should be <code class=\"language-text\">null</code></li>\n<li>After <code class=\"language-text\">err</code>, there can be any number of results arguments containing data for the callback to consume.</li>\n</ul>\n</li>\n<li>This standardization makes it possible to transform callbacks into more expressive formats.<!-- , such as [complex async operations](https://github.com/caolan/async), [Promises](http://mattgreer.org/articles/promises-in-wicked-detail/), or [Highland.js](http://highlandjs.org/) streams. --></li>\n</ul>\n<hr>\n<p>class: med-large</p>\n<h2>The Async Library: Motivations</h2>\n<p>Let's say I have several asynchronous functions that need to execute in series (i.e., one after the other). This would be necessary if, say, I'm writing logs to a file and I want them in order.</p>\n<p>We <em>could</em> do it by chaining callbacks, but this quickly gets messy:</p>\n<p>.smaller-code[</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">writeLogLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">'This is the first line'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">writeLogLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">'This is the second line'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">writeLogLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">'This is the third line'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Done writing the logs.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>]</p>\n<h2>And I'm not even handling errors here. That would make this even messier.</h2>\n<p>class: med-large</p>\n<h1>The Async Solution</h1>\n<p>We can do better than this by taking advantage of the standard callback format. Rather than those 'marching callbacks', we'll pass an array of functions into <code class=\"language-text\">async.series</code>.</p>\n<p>.smaller-code[</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">async<span class=\"token punctuation\">.</span><span class=\"token function\">series</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">writeLogLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">'This is the first line'</span><span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">writeLogLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">'This is the second line'</span><span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">writeLogLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">'This is the third line'</span><span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Done writing the logs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>]</p>\n<p>.footnote[* A higher-order function that generates callbacks could save us some work here - do you see how?]</p>\n<hr>\n<p>class: med-large, shrink-top</p>\n<h2>Wait, how does that work?</h2>\n<p>The idea behind <code class=\"language-text\">async.series</code> is actually quite simple. The trick is to call the asynchronous functions <em>recursively</em>. Here's a simple implementation that doesn't handle errors:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">series</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">arr<span class=\"token punctuation\">,</span> finalCB</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">seriesHelper</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">index</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">===</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">finalCB</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      arr<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">seriesHelper</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">seriesHelper</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<hr>\n<p>class: med-large</p>\n<h2>Exercise/Live Code Demo</h2>\n<p>Create a asyncMap function that accepts two parameters -- an array of async functions and a callback function. After all the callbacks are done, asyncMap should invoke the callback on the collection of results.</p>\n<hr>\n<p>class: med-large</p>\n<h2>Expected Behavior:</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">job1</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">cb</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">cb</span><span class=\"token punctuation\">(</span><span class=\"token string\">'first'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">900</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">job2</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">cb</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">cb</span><span class=\"token punctuation\">(</span><span class=\"token string\">'second'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">job3</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">cb</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">cb</span><span class=\"token punctuation\">(</span><span class=\"token string\">'third'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> jobs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>job1<span class=\"token punctuation\">,</span> job2<span class=\"token punctuation\">,</span> job3<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">callback</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">results</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">asyncMap</span><span class=\"token punctuation\">(</span>jobs<span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//-> first, second, third</span></code></pre></div>\n<hr>\n<p>class: med-large</p>\n<h1>Promises</h1>\n<p>Promises, built into all modern JS environments, solve the issues with callbacks.  A promise can be thought of as a future value, and as such can be in one of three states: pending, fulfilled, or rejected.  Promises are pending once first created, and, once they are either fulfilled or rejected, cannot be further changed. They take a function, that in turn is passed two functions, commonly named resolve and reject. You use these to set the state of the promise.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> myPromise <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>This creates a promise that becomes fulfilled after three seconds.</p>\n<hr>\n<p>class: med</p>\n<h1>Anatomy of a Promise</h1>\n<p>You can instantiate a promise by calling <code class=\"language-text\">new Promise()</code>. The functions <code class=\"language-text\">resolve</code> and <code class=\"language-text\">reject</code> are used to determine whether to continue to the next <code class=\"language-text\">.then()</code> or the next <code class=\"language-text\">.catch()</code></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// triggered if resolve was called</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'timer completed'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// triggered if reject was called</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error caught'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Note: Bluebird is a powerful promise library that offers additional features, similar to what the async library does for callbacks.</p>\n<hr>\n<p>class: med-large</p>\n<h1>Composing Promises</h1>\n<p>Promises are easy to compose.  Let's say you wanted to run tasks doA and doB and the same time, and then run C when they are both done.  Assuming the functions doA and doB both return promises:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token function\">doA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">doB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">doC</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error caught'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The above code with callbacks is much more complex!</p>\n<hr>\n<p>class: x-large</p>\n<h1>Next time</h1>\n<ol>\n<li>Object-Oriented JavaScript</li>\n<li>Implement Promises from scratch</li>\n<li>ES6 + ES2017</li>\n</ol>","frontmatter":{"date":"January 29, 2019","path":"/lectures/2","title":"Callbacks, Events, and Asynchronous Programming","metaTitle":null}}},"pageContext":{}}}