{"componentChunkName":"component---src-templates-markdown-js","path":"/lectures/10","result":{"data":{"markdownRemark":{"html":"<p>class: center, middle, block-text</p>\n<h1>Lecture \"I lost count\"</h1>\n<h2>Building an Application from Scratch</h2>\n<h4>Aka Removing the the training wheels</h4>\n<hr>\n<p>class: med</p>\n<h1>Agenda</h1>\n<ol>\n<li>How does the web work</li>\n<li>What do you <em>need</em></li>\n<li>Break down simple app (Penn Course Review Lite)</li>\n<li>Break down more complex app (Twitter for Birds)</li>\n<li>\n<p>Build Systems for React</p>\n<ul>\n<li>Webpack</li>\n<li>Create React App (CRA)</li>\n<li>Integrating server into this</li>\n</ul>\n</li>\n<li>\n<h2>Hosting with Heroku</h2>\n</li>\n</ol>\n<p>class: med</p>\n<h1>How does the web work</h1>\n<p><img src=\"https://web.stanford.edu/class/msande91si/www-spr04/readings/week1/InternetWhitepaper_files/ruswp_diag3.gif\" alt=\"web\"></p>\n<ul>\n<li>Bottom line, you <em>always</em> connect to some form of a server when serving pages</li>\n<li>\n<p>What's localhost:</p>\n<ul>\n<li>A local server</li>\n<li>What happens when someone else tries to access <a href=\"http://localhost:3000\">http://localhost:3000</a> ?</li>\n</ul>\n</li>\n</ul>\n<hr>\n<p>class: med</p>\n<h1>There are exceptions</h1>\n<ul>\n<li>\n<p>file://....</p>\n<ul>\n<li>Drag and drop any index.html file into a browser and it has a file:// protocol URL</li>\n<li>Basically can  view any local file you have on your system</li>\n<li>Neat little trick. Download any website:\n<code class=\"language-text\">wget -p -k --no-check-certificate https://www.penncoursereview.com</code></li>\n<li>Can I protect against this? Not really. Anyone who accesses your site also has access to the files you send along with it (including script\nrequires etc)</li>\n</ul>\n</li>\n</ul>\n<hr>\n<p>class: med</p>\n<h1>So ... server?</h1>\n<ul>\n<li>Yep.</li>\n<li>What have we been using in class to make a server?</li>\n<li>What does this line do?</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">app<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'listening on 3000'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>More minute, what can  be wrong with that?</li>\n</ul>\n<hr>\n<p>class: med</p>\n<h1>Fix!</h1>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">app<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">PORT</span> <span class=\"token operator\">||</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'listening on '</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">PORT</span> <span class=\"token operator\">||</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<hr>\n<p>class: large</p>\n<h1>Planning your JS app</h1>\n<hr>\n<h2>Planning</h2>\n<p>Decide the core features of your application.</p>\n<ul>\n<li>Data the user can see or interact with.</li>\n<li>Actions the user can carry out.</li>\n<li>Connections with other services/APIs?</li>\n</ul>\n<p>Start by building a <strong>minimum viable product</strong> that incorporates all of your essential features.\nMove into cool features once that's stable, but try to avoid <em>feature bloat</em>!</p>\n<hr>\n<img src=\"https://cdn.techinasia.com/wp-content/uploads/2015/10/MVP-1024x784.png\" style=\"width:100%\" alt=\"MVP\"/>\n<hr>\n<p>class: med-large</p>\n<h2>Example: Penn Course Review Lite</h2>\n<p>What do we want this app to have (necessary features in <strong>bold</strong>)</p>\n<ul>\n<li><strong>Login</strong>, with different authentication levels</li>\n<li><strong>Add/Read Reviews</strong></li>\n<li>Search/Browse Reviews</li>\n<li>Integration with PennInTouch</li>\n<li>Etc.</li>\n</ul>\n<p>When developing this app, we'll aim to get the necessary features done first, and then add additional features in subsequent iterations</p>\n<p>Note that what's \"necessary\" is somewhat subjective; this is why it's important to have a clear idea of what your app's purpose is.</p>\n<hr>\n<p>class: center, middle, block-text</p>\n<h1>Choosing your tech stack!</h1>\n<hr>\n<p>class: med-large</p>\n<h1>Selecting a tech stack</h1>\n<p>Pretty much any application you build is going to have 4 main building blocks:</p>\n<ul>\n<li>A runtime environment (node.js)</li>\n<li>A server (express)</li>\n<li>An app framework (backbone, react, angular, etc.)</li>\n<li>A database for persistence (mongodb, mysql, etc.)</li>\n</ul>\n<p>One quintessential setup is the MEAN stack (mongo, express, angular, node)</p>\n<hr>\n<p>class: large</p>\n<h1>How do I know what to choose?</h1>\n<p>That's a tough question, and generally depends on some mix of what the project demands and personal preference.</p>\n<p>For our purposes, you should ALWAYS use Node and Express!</p>\n<p>Frameworks are a bit more nuanced and complicated...</p>\n<hr>\n<p>class: med</p>\n<h1>Choosing an app framework</h1>\n<p>First you should decide how robust a framework you need; choose the simplest solution to your problem.</p>\n<ul>\n<li>\n<p>Templating Engines  (What do  they do?)</p>\n<ul>\n<li><strong>EJS</strong></li>\n<li><strong>Handlebars</strong></li>\n</ul>\n</li>\n<li>\n<p>More robust frameworks</p>\n<ul>\n<li><strong>React</strong>: generally more intuitive, although there are some weird quirks to using react components</li>\n<li><strong>Angular/Vue/Ember/etc.</strong> - we don't recommend using other frameworks on the final unless you have a lot of experience with them, and even then, don't expect that the TA's will be able to help you if it breaks</li>\n</ul>\n</li>\n</ul>\n<p>However, beyond obvious functionality, choice of framework generally comes down to what <em>you</em> find most intuitive for the task at hand.</p>\n<hr>\n<p>class: med-large</p>\n<h1>MongoDB vs. MySQL</h1>\n<p>For any app, you'd probably like a way to persist data</p>\n<p>There are tons of database options, but the two most popular are MongoDB and mySQL</p>\n<ul>\n<li>mySQL is a traditional <strong>relational database</strong></li>\n<li>MongoDB is <strong>non-relational</strong></li>\n</ul>\n<p>If you don't know the difference, just use Mongo. There are tradeoffs to each, however at the scale of your final projects there should be no difference.</p>\n<p>We'll be covering MongoDB in more detail next week.</p>\n<hr>\n<p>class: med-large</p>\n<h1>Example: Penn Course Review Lite</h1>\n<p>We chose to use EJS + MongoDB (on top of express and node)</p>\n<ul>\n<li>Express routes provide most of the user interaction</li>\n<li>EJS allows us to generate barebones html pages using templates found in 'views'</li>\n<li>MongoDB lets us write, store, and retrieve reviews</li>\n</ul>\n<p>I strongly urge all of you to go through the project files from this assingment as well as others in order to understand how apps are built.</p>\n<hr>\n<p>class: med</p>\n<h1>Additional Functionality</h1>\n<p>Additionally, you might need some more complex functionality</p>\n<ul>\n<li>Real-time communication? <strong>Socket.io</strong></li>\n<li>Data visualization? <strong>D3</strong></li>\n<li>Managing state? <strong>Redux</strong></li>\n<li>Everything? <strong>jQuery</strong></li>\n</ul>\n<p>One of the great things about Javascript is that there's a library for essentially anything you can think of.</p>\n<hr>\n<p>class: center, middle, block-text</p>\n<h1>Misc. Considerations</h1>\n<hr>\n<p>class: med-large</p>\n<h1>Writing your app</h1>\n<p>I won't go into to much detail about writing your app, since you've been learning just that for the past 9 weeks, however I wanted to highlight some important details to consider when you're writing full apps versus fill out stubbed hw implementations.</p>\n<p>Although, if you're using a similar tech stack to previous weeks' homeworks, feel free to copy the stub.</p>\n<hr>\n<p>class: med-large</p>\n<h1>Setting up the project directory</h1>\n<p>Make sure you set up your directory for GitHub</p>\n<ul>\n<li>use a <em>.gitignore</em> file</li>\n</ul>\n<p>Setting up the directory</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> init\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span> <span class=\"token punctuation\">[</span>package<span class=\"token punctuation\">]</span>\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save <span class=\"token punctuation\">[</span>package<span class=\"token punctuation\">]</span>\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save-dev <span class=\"token punctuation\">[</span>package<span class=\"token punctuation\">]</span></code></pre></div>\n<hr>\n<p>class: med</p>\n<h1>Module Systems - Organizing Your Project</h1>\n<p>\"Require\" is node's default module system. It allows you to break your code up into different files and folders, then import this code as needed. It's also how you import libraries.</p>\n<p><strong>Exporting (on the node side)</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> express<span class=\"token punctuation\">.</span><span class=\"token function\">Router</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'new'</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    \t  res<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token string\">'addreview'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> router</code></pre></div>\n<hr>\n<p>class: med</p>\n<h1>Module Systems - Organizing Your Project</h1>\n<p><strong>Importing</strong>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> reviews <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./routes/reviews'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Check past homeworks for more examples of how to use module systems</p>\n<p>Note that you will need to use a bundler like browserify or webpack to require pacakges in browser (such as for React projects)</p>\n<hr>\n<p>class: med-large</p>\n<h1>Dressing up the front-end</h1>\n<ul>\n<li>While it's not necessarily JS, after you finish writing your basic app functionality you might want to improve the front-end to increase usability</li>\n<li>\n<p>You can be as involved in this as you want</p>\n<ul>\n<li>Use a plain css stylesheet</li>\n<li>Use compiled css (SASS/LESS)</li>\n<li>Use a front-end \"framework\" (Bootstrap, Bourbon, Foundation)</li>\n</ul>\n</li>\n</ul>\n<hr>\n<p>class: med</p>\n<h1>For the love of god use Git</h1>\n<ul>\n<li>Tbh really shocking that this <em>isn't</em> a part of the beginning CS curriculum at Penn</li>\n<li>\n<p>Pretty simple</p>\n<ul>\n<li>go to directory you want to start out in</li>\n<li><code class=\"language-text\">git init</code> (you may need to install git...but most systems come with it already</li>\n<li><code class=\"language-text\">git add filename(s)</code>. Once you 'add' a file, it is marked as being tracked. You can do <code class=\"language-text\">git status</code> to see all such tracked and untracked files</li>\n<li>Anytime you add  a new file run <code class=\"language-text\">git add filename</code> otherwise, just doing <code class=\"language-text\">git add  -u</code> will stage all changes in tracked files in a commit</li>\n<li><code class=\"language-text\">git commit  -m &quot;message&quot;</code></li>\n<li><code class=\"language-text\">git push someLocation someBranch</code></li>\n</ul>\n</li>\n</ul>\n<hr>\n<p>class: med</p>\n<h1>What are 'someLocation' and 'someBranch'</h1>\n<ul>\n<li>Go to github. Set up an account</li>\n<li>Create a new repository (on github)</li>\n<li>There will be a  URL</li>\n<li>In terminal, do <code class=\"language-text\">git remote add origin URLHERE</code></li>\n<li>So now you have a location (someLocation)  equal to the repo hosted on github (kinda  like backing up your work)</li>\n<li>Not every commit has to be pushed!</li>\n</ul>\n<hr>\n<p>class: med, center</p>\n<h1>React apps</h1>\n<p><img src=\"https://i.imgur.com/uD0mSsm.gif\" alt=\"richard_and_mortimer\"></p>\n<hr>\n<p>class: med</p>\n<h1>Let's look at Twitter for Birds</h1>\n<img src=\"https://i.imgur.com/bFvWIWs.png\" style=\"height: 500px\">\n<hr>\n<p>class: med</p>\n<p>Things I've been hiding from you</p>\n<ul>\n<li>webpack.config.js</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> webpack <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'webpack'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> <span class=\"token constant\">BUILD_DIR</span> <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'public'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> <span class=\"token constant\">APP_DIR</span> <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'src'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> config <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  entry<span class=\"token operator\">:</span> <span class=\"token constant\">APP_DIR</span> <span class=\"token operator\">+</span> <span class=\"token string\">'/index.js'</span><span class=\"token punctuation\">,</span>\n  output<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    path<span class=\"token operator\">:</span> <span class=\"token constant\">BUILD_DIR</span><span class=\"token punctuation\">,</span>\n    filename<span class=\"token operator\">:</span> <span class=\"token string\">'bundle.js'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  module<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    rules<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token operator\">...</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> config<span class=\"token punctuation\">;</span></code></pre></div>\n<hr>\n<h1>Da Rules</h1>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">rules<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        test<span class=\"token operator\">:</span> <span class=\"token regex\">/\\.js$/</span><span class=\"token punctuation\">,</span>\n        exclude<span class=\"token operator\">:</span> <span class=\"token regex\">/node_modules/</span><span class=\"token punctuation\">,</span>\n        use<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          loader<span class=\"token operator\">:</span> <span class=\"token string\">'babel-loader'</span><span class=\"token punctuation\">,</span>\n          options<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            presets<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'es2015'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'transform-object-rest-spread'</span><span class=\"token punctuation\">]</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></code></pre></div>\n<hr>\n<h1>Also .babelrc for good measure</h1>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"presets\"</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"es2015\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"plugins\"</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"transform-object-rest-spread\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<h1>Distinction between T4B and PCR lite?</h1>\n<ul>\n<li>\n<p>No explicit views to render</p>\n<ul>\n<li>With T4B, just send over index.html</li>\n<li>index.html requires a /js/bundle.js</li>\n<li>which webpack generates</li>\n<li>which in turn is served by express</li>\n<li>in the case that none of the requests match the previous paths</li>\n<li>spoooky inception!</li>\n</ul>\n</li>\n</ul>\n<hr>\n<p>class: med</p>\n<h1>Create React App (Aka blessing and a  curse)</h1>\n<ul>\n<li>Blessing because everything is done for you with regards to webpack optimization etc</li>\n<li>Curse because it runs its own server...while you also run a server (cri)</li>\n<li>\n<p>How to get around that</p>\n<ul>\n<li>\n<h2><a href=\"https://www.fullstackreact.com/articles/using-create-react-app-with-a-server/\">https://www.fullstackreact.com/articles/using-create-react-app-with-a-server/</a></h2>\n<p>class: center, middle, block-text</p>\n</li>\n</ul>\n</li>\n</ul>\n<h1>Deploying with Heroku</h1>\n<hr>\n<p>class: med-large</p>\n<h1>Heroku Fast Facts</h1>\n<ul>\n<li>Heroku is a web hosting platform that works over Git. You commit your app, push it to Heroku, and it's automatically deployed.</li>\n<li>Supports add-ons for databases, logging, caching, monitoring, metrics, etc.</li>\n<li>Easy to use, easy to scale.</li>\n</ul>\n<hr>\n<p>class: med-large</p>\n<h2>Getting started with Heroku</h2>\n<p>Assuming you already have an Express app working locally...</p>\n<ul>\n<li>Sign up for an account at <a href=\"https://www.heroku.com/\">heroku.com</a>.</li>\n<li>Download the <a href=\"https://toolbelt.heroku.com/\">Heroku Toolbelt</a>.</li>\n<li>Commit your app into Git on the master brach.</li>\n<li>\n<p>Create a <a href=\"https://devcenter.heroku.com/articles/procfile\">Procfile</a> and commit that too.</p>\n<ul>\n<li>Usually your Procfile will just be one line: <code class=\"language-text\">web: node app.js</code></li>\n</ul>\n</li>\n</ul>\n<p>Heroku has an <a href=\"https://devcenter.heroku.com/articles/getting-started-with-nodejs\">online tutorial</a> with all this information, but some of their steps are unnecessary.</p>\n<hr>\n<p>class: large</p>\n<p>Now run some commands from the terminal to deploy everything:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">heroku create <span class=\"token operator\">&lt;</span>YOUR APP NAME<span class=\"token operator\">></span>\n<span class=\"token function\">git</span> push heroku master\nheroku ps:scale <span class=\"token assign-left variable\">web</span><span class=\"token operator\">=</span><span class=\"token number\">1</span>\nheroku <span class=\"token function\">open</span> <span class=\"token comment\"># Open your app in the browser</span></code></pre></div>\n<p>Heroku will automatically detect your dependencies from <code class=\"language-text\">package.json</code> and install them for you, then run the command from your Procfile to start your app. If things go wrong, you can display the logs with</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">heroku logs</code></pre></div>\n<hr>\n<p>class: large</p>\n<h2>Making Changes</h2>\n<p>It's really, really easy to make changes to your Heroku app. Just commit to master and push to Heroku again, and it'll auto-update for you!</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> <span class=\"token function\">add</span> -A <span class=\"token builtin class-name\">.</span>\n<span class=\"token function\">git</span> commit -m <span class=\"token string\">\"Made some changes\"</span>\n<span class=\"token function\">git</span> push heroku master</code></pre></div>\n<hr>\n<p>class: x-large</p>\n<h1>Example</h1>\n<p>Let's deploy an app to Heroku for practice.</p>\n<p>We'll use <a href=\"https://github.com/sibnerian/cis197-chat-example\">this improved version of the Socket.io example app</a>.</p>\n<hr>\n<p>class: med</p>\n<h1>A word of warning</h1>\n<p>A couple of important considerations for Heroku instances:</p>\n<ul>\n<li>If your app goes unused for more than 15 minutes, the server instance dies an will need to be spun up again the next time a user connects</li>\n<li>Processes longer than 30 seconds are killed</li>\n<li>No static uploads. So if you want to use pictures, for instance, you would have to upload them to another service like Amazon S3 instead of directly to Heroku</li>\n</ul>\n<hr>\n<p>class: center, middle, block-text</p>\n<h1>Deploying with Amazon Web Services</h1>\n<p>tldr: don't do this unless you know what you're doing</p>\n<hr>\n<p>class: med-large</p>\n<h1>Intro to AWS</h1>\n<ul>\n<li>Amazon Web Services is the largest enterprise cloud hosting platform in the world. They provide everything: servers, databases, storage, DNS and networking, deployment...</li>\n<li>If you don't know SSH and Unix terminal, then you'll need to review that.</li>\n<li>\n<p>A bit harder to use than Heroku, but...</p>\n<ul>\n<li>Cheaper</li>\n<li>Faster</li>\n<li>\n<p>You can run anything on AWS.</p>\n<ul>\n<li><strong>ANYTHING</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>For an app like what you'd use for the final project, we'd recommending hosting it on an EC2 instance, which lets you provision a virtual server running in one of Amazon's gigantic server farms.</p>\n<hr>\n<p>class: med</p>\n<h1>Disclaimer</h1>\n<p>Only try this if you are otherwise <strong>completely finished</strong> with your final project.</p>\n<p>Deploying to AWS can be a major pain and carries with it a whole set of important considerations.</p>\n<p>We won't go into details here because AWS changes very often. However, there are plenty of resources avaliable online and we are more than happy to help you out if you finish early.</p>\n<hr>\n<p>class: med-large</p>\n<h1>Why does anyone want to use AWS anyway?</h1>\n<p>Well, AWS gives you control over an entire virtual server. You can run jobs in the background, customize your environment, and much more <strong>without</strong> having to use a third-party \"add-on.\"</p>\n<p>Plus, AWS stays on 24/7 with free tier...whereas Heroku will spin down your app after a few minutes of inactivity.</p>\n<p>Heroku great for rapid prototyping, but if you need custom functionality, multiple servers, or 99.99% uptime is crucial - then use AWS.</p>","frontmatter":{"date":"January 29, 2019","path":"/lectures/10","title":"Building an Application from Scratch","metaTitle":null}}},"pageContext":{}}}