{"componentChunkName":"component---src-templates-markdown-js","path":"/lectures/7","result":{"data":{"markdownRemark":{"html":"<p>class: center, middle, block-text</p>\n<h1>Lecture 7</h1>\n<h2>Servers in JavaScript</h2>\n<hr>\n<p>class: x-large</p>\n<h1>Agenda</h1>\n<ol>\n<li>HTTP</li>\n<li>HTTP Verbs</li>\n<li>REST APIs</li>\n<li>Express</li>\n<li>Basics</li>\n<li>Middleware</li>\n<li>Router</li>\n<li>Request</li>\n<li>Response</li>\n</ol>\n<hr>\n<p>class: center, middle, block-text</p>\n<h1>HTTP</h1>\n<hr>\n<p>class: large</p>\n<h1>HTTP Basics</h1>\n<ul>\n<li>\n<p>HTTP is a client-server protocol for <em>hypertext</em></p>\n<ul>\n<li>This is the \"HT\" in \"HTML\" too</li>\n</ul>\n</li>\n<li>The <strong>client</strong> (web browser, phone app, or computer) sends a <strong>request</strong> for a page over the Internet to a specific address</li>\n<li>The <strong>server</strong> corresponding to that address receives the request, computes a <strong>response</strong>, and delivers it to the client</li>\n<li>The conversation can be encrypted (HTTPS, aka SSL aka TLS), and there's a lot going on behind the scenes (TCP/IP, DNS translation), but it's always a request and response</li>\n</ul>\n<hr>\n<p>class: large</p>\n<h1>HTTP Verbs</h1>\n<p>An HTTP request has a lot of associated information, but at the most basic level, there is always a <strong>verb</strong> associated with the request.</p>\n<p>Here are the most common ones (we'll only use these on the homeworks):</p>\n<ol>\n<li>GET</li>\n<li>POST</li>\n<li>PUT</li>\n<li>DELETE</li>\n</ol>\n<hr>\n<p>class: x-large</p>\n<h1>HTTP GET</h1>\n<p><strong>GET</strong> is used when requesting information from a server. It should never change a server's application state*.</p>\n<p>Example: Typing a URL into your browser sends a GET request that returns the webpage.</p>\n<hr>\n<p>class: x-large</p>\n<h1>HTTP POST</h1>\n<p><strong>POST</strong> is used to request the creation of a new object on the server.</p>\n<p>Example: When you create a new status on Facebook, that would be a POST request.</p>\n<hr>\n<p>class: x-large</p>\n<h1>HTTP PUT</h1>\n<p><strong>PUT</strong> is used to request the replacement of an existing object on the server with new data.</p>\n<p>Example: If you go back and change the content of an existing Facebook status, then that would be a PUT request.</p>\n<hr>\n<p>class: x-large</p>\n<h1>HTTP DELETE</h1>\n<p><strong>DELETE</strong> is used to request that an existing object on the server be removed completely.</p>\n<p>Example: If you delete your Facebook status, then that would be a DELETE request.</p>\n<hr>\n<p>class: med-large</p>\n<h1>Sending Data</h1>\n<ul>\n<li>\n<p>The verb is only one part of an HTTP request. There are also <em>headers</em>, a <em>querystring</em>, and a <em>body</em>.</p>\n<ul>\n<li>\n<p><strong>Headers</strong> are used to send meta-data about the request</p>\n<ul>\n<li>Common examples: security tokens, cookies, browser info</li>\n</ul>\n</li>\n<li>\n<p>The <strong>body</strong> contains information that the server needs to process the request.</p>\n<ul>\n<li>Common example: file upload, JSON object</li>\n<li>Used to pass data with <strong>POST</strong>, <strong>PUT</strong>, <strong>DELETE</strong> verbs</li>\n</ul>\n</li>\n<li>\n<p>A <strong>querystring</strong> is a bunch of key-value pairs after a URL - e.g. <code class=\"language-text\">http://google.com/search?q=cats&amp;key=1234</code></p>\n<ul>\n<li>The key-value pairs are <code class=\"language-text\">{q: &#39;cats&#39;, key: &#39;1234&#39;}</code></li>\n<li>Used to pass data with <strong>GET</strong> verb</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<p>class: large</p>\n<h1>REST APIs</h1>\n<ul>\n<li><strong>REST</strong> = <strong>RE</strong>presentational <strong>S</strong>tate <strong>T</strong>ransfer</li>\n<li>Server exposes HTTP <em>endpoints</em> which clients can use to communicate with it</li>\n<li>Cacheable, layered, uniform interface</li>\n<li>\n<p><strong>Stateless</strong> - server keeps no information after request is completed</p>\n<ul>\n<li>Instead, the body or querystring is used to pass information</li>\n</ul>\n</li>\n<li>REST is widely used  because it is simple and scalable</li>\n</ul>\n<hr>\n<p>class: large</p>\n<h1>REST in jQuery (AJAX)</h1>\n<p>Super simple syntax:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> request <span class=\"token operator\">=</span> $<span class=\"token punctuation\">.</span><span class=\"token function\">ajax</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  url<span class=\"token operator\">:</span> <span class=\"token string\">\"path/to/resource\"</span><span class=\"token punctuation\">,</span>\n  type<span class=\"token operator\">:</span> <span class=\"token string\">\"POST\"</span><span class=\"token punctuation\">,</span>\n  data<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> id <span class=\"token operator\">:</span> someId <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// sent as *query string*</span>\n  success<span class=\"token operator\">:</span> onSuccessFunction<span class=\"token punctuation\">,</span>\n  error<span class=\"token operator\">:</span> onErrorFunction\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<hr>\n<p>class: center, middle, block-text</p>\n<h1>Express</h1>\n<hr>\n<p>class: large</p>\n<h1>Express...</h1>\n<ul>\n<li>...is a package - must install via npm</li>\n<li>...handles <strong>URL routing</strong>, <strong>requests</strong> and <strong>responses</strong></li>\n<li>...is oriented around <strong>middlewares</strong> and <strong>handler functions</strong></li>\n<li>...provides minimal building blocks which you arrange to make a complex application</li>\n</ul>\n<hr>\n<p>class: large</p>\n<h1>Hello World with Express</h1>\n<p>At its simplest, an Express server can fit on one slide:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> port <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">PORT</span> <span class=\"token operator\">||</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello world!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Start listening for requests</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>port<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Listening on port '</span> <span class=\"token operator\">+</span> port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<hr>\n<p>class:shrink-top</p>\n<h2>Anatomy of an Express App</h2>\n<p>.center[<img src=\"/~cis197/lectures/images/express-diagram.png\" alt=\"/~cis197/lectures/images/express-diagram.png\">]</p>\n<hr>\n<p>class: center, middle, block-text</p>\n<h1>Middleware</h1>\n<hr>\n<p>class: med, smaller-code</p>\n<h2>Middleware</h2>\n<ul>\n<li>A <strong>middleware function</strong> is a function that handles a request. They are <em>chained together</em> so that multiple middlewares run on the same request.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">noOpMiddleware</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>\n<p>Middleware parameters:</p>\n<ul>\n<li><code class=\"language-text\">req</code> - an object representing the request.</li>\n<li><code class=\"language-text\">res</code> - an object representing the response. Has several methods <br>(<code class=\"language-text\">.render</code>, <code class=\"language-text\">.send</code>, <code class=\"language-text\">.json</code>) to send data and complete the request.</li>\n<li><code class=\"language-text\">next</code> - a callback (!) that passes control to the next middleware.</li>\n</ul>\n</li>\n<li>You can modify the <code class=\"language-text\">req</code> and <code class=\"language-text\">res</code> object directly - they are the actual objects that will be passed to other middlewares.</li>\n</ul>\n<hr>\n<p>class: med-large</p>\n<h2>Adding Middleware in Express</h2>\n<p>Adding middleware to an Express app is just a matter of calling <code class=\"language-text\">app.use()</code>.</p>\n<p>Note that the middlewares will run <strong>in the order you add them.</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'I am a middleware!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>You can also specify middleware for a specific endpoint:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/special'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'I only run on /special'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<hr>\n<p>class: large</p>\n<h2>Adding Middleware, Continued</h2>\n<p>You can register multiple middleware functions in one single call:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">setFoo</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    req<span class=\"token punctuation\">.</span>foo <span class=\"token operator\">=</span> <span class=\"token string\">'some value'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">logFoo</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>setFoo<span class=\"token punctuation\">,</span> logFoo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<hr>\n<p>class: large</p>\n<h1>Commonly Used Middlewares</h1>\n<ul>\n<li><a href=\"https://github.com/expressjs/body-parser\">body-parser</a> - provides middleware for parsing JSON text, URL encoding, and more into a nice <code class=\"language-text\">req.body</code></li>\n<li><a href=\"https://github.com/expressjs/cookie-parser\">cookie-parser</a> - provides middleware to parse the <code class=\"language-text\">Cookie</code> header. Also supports signed cookies with a key of your choice.</li>\n<li><a href=\"https://github.com/expressjs/morgan\">morgan</a> - log all incoming HTTP requests</li>\n<li><a href=\"https://github.com/expressjs/csurf\">csurf</a> - used to prevent cross-site request forgery</li>\n<li><a href=\"http://expressjs.com/guide/using-middleware.html#middleware.built-in\">express.static</a> - serve a directory as static content</li>\n</ul>\n<hr>\n<p>class: large</p>\n<h1>Handling Errors with Middleware</h1>\n<p>Sometimes errors happen. When they do, you can pass in an error argument to the <code class=\"language-text\">next()</code> callback to pass it off to your <em>error handling middleware</em>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">explode</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Something exploded!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<hr>\n<p>class: med-large</p>\n<h2>Handling Errors, Continued</h2>\n<p>An <em>error handling middleware</em> takes the error it's handling as its first argument, along with the usual req, res, next. They should be registered <strong>after</strong> all the other middleware in your app.</p>\n<p>The extra <code class=\"language-text\">err</code> argument is the ONLY difference between a regular middleware and an error-handling middleware, so be careful!</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">logError</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span>stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">sendErrorMsg</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'There was an error!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>logError<span class=\"token punctuation\">,</span> sendErrorMsg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<hr>\n<p>class: center, middle, block-text</p>\n<h1>Router</h1>\n<hr>\n<p>class: med-large</p>\n<h1>The Express Router</h1>\n<p>From the docs:</p>\n<blockquote>\n<p>A router object is an isolated instance of middleware and routes. You can think of it as a \"mini-application,\" capable only of performing middleware and routing functions. Every Express application has a built-in app router.</p>\n<p>A router behaves like middleware itself, so you can use it as an argument to app.use() or as the argument to another router's use() method.</p>\n</blockquote>\n<p>Routers are used to <strong>modularize your code</strong> by defining subsections that only run on specific paths.</p>\n<hr>\n<h1>Router Example</h1>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> router <span class=\"token operator\">=</span> express<span class=\"token punctuation\">.</span><span class=\"token function\">Router</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'I am running from a router!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello from the router!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/router'</span><span class=\"token punctuation\">,</span> router<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<hr>\n<p>class: med-large</p>\n<h1>Router Methods</h1>\n<p>We've already seen that routers can 1) use middleware, and 2) handle \"get\" requests. You can actually handle ANY HTTP verb just by calling <code class=\"language-text\">router.verb()</code>. Supported methods include:</p>\n<ul>\n<li><code class=\"language-text\">router.use()</code></li>\n<li><code class=\"language-text\">router.get()</code></li>\n<li><code class=\"language-text\">router.post()</code></li>\n<li><code class=\"language-text\">router.put()</code></li>\n<li><code class=\"language-text\">router.patch()</code></li>\n<li><code class=\"language-text\">router.delete()</code></li>\n<li><code class=\"language-text\">router.route()</code> - This lets you chain other verbs (<code class=\"language-text\">.get</code>, <code class=\"language-text\">.post</code>) at the same URL. Handy for avoiding typos!</li>\n</ul>\n<hr>\n<p>class: large</p>\n<h1>Route Parameters</h1>\n<p>By putting a colon before a section of a route, you can create a <em>parametrized route</em> (with the parameter values available on <code class=\"language-text\">req.params</code>). For example, if you have the route <code class=\"language-text\">/user/:id</code>, then it will match:</p>\n<ul>\n<li><code class=\"language-text\">/user/1234</code> → req.params.id = '1234'</li>\n<li><code class=\"language-text\">/user/isibner</code> → req.params.id = 'isibner'</li>\n<li><code class=\"language-text\">/user/id</code> → req.params.id = 'id'</li>\n</ul>\n<p>This is extremly useful for crafting a RESTful API, since these parameters will often correspond to objects in the database.</p>\n<hr>\n<p>class: center, middle, block-text</p>\n<h1>Requests</h1>\n<hr>\n<p>class: large</p>\n<h1>Requests</h1>\n<p>The request object is passed in to every middleware function in order, so most of its properties are set by the middleware themselves. For instance:</p>\n<ul>\n<li>The <code class=\"language-text\">req.body</code> property is set by the <a href=\"https://github.com/expressjs/body-parser\">body-parser</a> middleware</li>\n<li>The <code class=\"language-text\">req.cookies</code> property is set by the <a href=\"https://github.com/expressjs/cookie-parser\">cookie-parser</a> middleware</li>\n</ul>\n<hr>\n<p>class: med-large</p>\n<h1>Default Request Fields</h1>\n<ul>\n<li>\n<p>We've already seen it, but <code class=\"language-text\">req.params</code> contains all the route parameters along with their values</p>\n<ul>\n<li>Example: say we are listening for GET requests on <code class=\"language-text\">/groups/:id/:message</code></li>\n<li>GET <code class=\"language-text\">/groups/3/49</code> → req.params = <code class=\"language-text\">{id: &#39;3&#39;, message: &#39;49&#39;}</code></li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">req.query</code> is similar to <code class=\"language-text\">req.params</code>, but it contains <em>query string</em> values</p>\n<ul>\n<li>Example: say we are listening for GET requests on <code class=\"language-text\">/queries</code></li>\n<li>GET <code class=\"language-text\">/queries?animal=ferret&amp;name=tobi</code> → req.query = <code class=\"language-text\">{animal: &#39;ferret&#39;, name: &#39;tobi&#39;}</code></li>\n</ul>\n</li>\n</ul>\n<hr>\n<p>class: center,middle, block-text</p>\n<h1>Responses</h1>\n<hr>\n<p>class: med-large</p>\n<h1>Responses</h1>\n<p>Responses are a little bit more in-depth than requests, but still pretty easy. Let's start off with the basic methods first.</p>\n<ul>\n<li>\n<p><code class=\"language-text\">res.set()</code> - sets a header value. Useful for allowing your app to be used from any site.</p>\n<ul>\n<li><code class=\"language-text\">res.set(&#39;Access-Control-Allow-Origin&#39;,  &#39;*&#39;)</code></li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">res.status()</code> - set the HTTP status code to indicate an error.</p>\n<ul>\n<li><code class=\"language-text\">res.status(404)</code> for Not Found errors</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">res.send()</code> - send a string, object, or Array as data.</p>\n<ul>\n<li><code class=\"language-text\">res.send({error: &#39;Mocha exploded!&#39;})</code></li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">res.redirect()</code> - redirect the user to another page.</p>\n<ul>\n<li><code class=\"language-text\">res.redirect(&#39;/login&#39;)</code> - redirect to login page</li>\n</ul>\n</li>\n</ul>\n<hr>\n<p>class: large</p>\n<h1>Rendering</h1>\n<p>The response object can render <em>templates</em> based on <em>local values</em>. For instance, if two different users request their profile pages, then you'd probably want to use the same template. However, you'd want their names and profile pictures to be different!</p>\n<p>To do this, you'll need to know about three things:</p>\n<ul>\n<li><code class=\"language-text\">res.locals</code></li>\n<li><code class=\"language-text\">res.render()</code></li>\n<li>The Express \"view engine\"</li>\n</ul>\n<hr>\n<p>class: large</p>\n<h1>Local Variables</h1>\n<p>To specify the values for variables in your template, just modify <code class=\"language-text\">res.locals</code>. This can be done with some middleware:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span>locals<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token string\">'My Awesome Express App'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<hr>\n<p>class: large</p>\n<h1>Rendering</h1>\n<p>Once you've set up your local variables, call <code class=\"language-text\">res.render(template)</code>, and it'll render the template using the local values. You can also pass in more local variables at call time.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token string\">'index'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>greeting<span class=\"token operator\">:</span> <span class=\"token string\">'hi'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<hr>\n<p>class: large</p>\n<h1>View Engine</h1>\n<p>Express expects your templates to be in a <code class=\"language-text\">views</code> folder, but you can use any (or many) libraries to process those templates.</p>\n<p>For instance, let's say we want to use <a href=\"http://www.embeddedjs.com/\">EJS</a> (Embedded JavaScript) to render our <code class=\"language-text\">.ejs</code> templates, and also as the default. But we also want to render <code class=\"language-text\">.jade</code> files with <a href=\"http://jade-lang.com/\">Jade</a>. Here's how:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">engine</span><span class=\"token punctuation\">(</span><span class=\"token string\">'jade'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'jade'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__express<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">engine</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ejs'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ejs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>renderFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'view engine'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ejs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<hr>\n<p>class: center, middle, block-text, x-large</p>\n<h1>Cookies</h1>\n<p><img src=\"http://i.imgur.com/5Hr1rvD.gif?1\" alt=\"http://i.imgur.com/5Hr1rvD.gif?1\"></p>\n<hr>\n<p>class: large</p>\n<h1>Session state</h1>\n<p>It's pretty common to want to keep information about a user's session between requests. For instance, we want to keep track of the fact that a user is logged in - otherwise they'd have to put in their password on every page.</p>\n<p>But HTTP is <em>stateless</em>. The server gets a request and always uses the same code path (i.e. middleware chain) to evaluate it. So we need a way to keep track of a user's session securely in this stateless environment using <em>cookies</em>.</p>\n<hr>\n<p>class: med-large</p>\n<h1>Cookies</h1>\n<p>A cookie is nothing but a set of key-value pairs sent by the server along with the HTTP response. The browser then sends back the cookie, unmodified, with the next request to that server. So you can keep session state (e.g. a session ID) in the cookie, and then just read it again when the user sends it with the next request!</p>\n<p>.center[<img src=\"http://i.imgur.com/HO3k0N0.png\" alt=\"http://i.imgur.com/HO3k0N0.png\">]</p>\n<hr>\n<p>class: large</p>\n<h1>Signed Cookies</h1>\n<p>Of course, a cookie isn't much use if a malicious user could modify it with any values they want! So in practice, a <em>signed cookie</em> is used to prevent tampering.</p>\n<p>The key-value pairs of the cookie are augmented by one final KV pair: an hash of all other key-value pairs, plus a secret key. This hash is checked against the key-value pairs when the cookie is sent back. If tampering occurred, they won't match, and the request is rejected!</p>\n<p>Conveniently, the <a href=\"https://github.com/expressjs/cookie-session\">cookie-session</a> middleware will do a lot of this for us! We'll use it on the homework.</p>\n<hr>\n<p>class: x-large</p>\n<h1>Example Code</h1>\n<p>Example code is available in <a href=\"https://github.com/cis197-2015S/express-examples\">this repository</a>. Make sure to check the different branches!</p>\n<hr>\n<p>class: x-large</p>\n<h1>Coming Up</h1>\n<ul>\n<li>\n<p>Homework 5.</p>\n<ul>\n<li>\"Penn Course Review Lite\" - an API showcasing all the functionality of Express!</li>\n</ul>\n</li>\n<li>Next week: back to the browser with ReactJS.</li>\n</ul>","frontmatter":{"date":"January 29, 2019","path":"/lectures/7","title":"Servers in JavaScript","metaTitle":null}}},"pageContext":{}}}