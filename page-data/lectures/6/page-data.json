{"componentChunkName":"component---src-templates-markdown-js","path":"/lectures/6","result":{"data":{"markdownRemark":{"html":"<p>class: center, middle, block-text</p>\n<h1>Lecture 6</h1>\n<h2>Backbone.js</h2>\n<hr>\n<p>class: x-large</p>\n<h1>Agenda</h1>\n<ol>\n<li>Backbone</li>\n<li>Design Philosophy</li>\n<li>Model</li>\n<li>Collection</li>\n<li>Events</li>\n<li>View</li>\n<li>Router</li>\n</ol>\n<hr>\n<p>class: center, middle, block-text</p>\n<h1>Design Philosophy</h1>\n<hr>\n<p>class: large</p>\n<h1>Data/DOM Separation</h1>\n<h2>For a large application, you don't want all of your state to be stored in the DOM (like it was in the last homework). In Backbone, you represent your data as <strong>models</strong> and your display logic as <strong>views</strong>. These communicate via <strong>events</strong>, which allow views to update whenever their models change (for instance, when a user interacts with the UI).</h2>\n<p>class: large</p>\n<h1>Minimalism</h1>\n<p>Backbone is an unopinionated <em>microframework</em> - it's designed to be compatible with whatever libraries you prefer. The tradeoff is that you have to write some bits of code yourself - for instance, the <em>render</em> method of a view must be entirely user-supplied.</p>\n<hr>\n<p>class: large</p>\n<h1>Dependencies</h1>\n<p>Backbone requires <a href=\"http://underscorejs.org/\">Underscore.js</a> as a hard dependency. For HTTP syncing, DOM manipulation, and the router, Backbone also requires <a href=\"https://api.jquery.com/\">jQuery</a>.</p>\n<hr>\n<p>class: center, middle, block-text</p>\n<h1><a href=\"http://backbonejs.org/#Model\">Backbone.Model</a></h1>\n<hr>\n<p>class: large</p>\n<p>From the Backbone docs:</p>\n<blockquote>\n<p>Models are the heart of any JavaScript application, containing the\ninteractive data as well as a large part of the logic surrounding it:\nconversions, validations, computed properties, and access control. You\nextend <code class=\"language-text\">Backbone.Model</code> with your domain-specific methods, and <code class=\"language-text\">Model</code>\nprovides a basic set of functionality for managing changes.</p>\n</blockquote>\n<hr>\n<p>class: med-large</p>\n<h1>Backbone.Model.extend</h1>\n<p>Backbone provides a specific way to create a <em>subclass</em> of <code class=\"language-text\">Model</code>: the <code class=\"language-text\">extend</code> method. This correctly sets up the prototype chain, so you can further extend your own model classes.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> Note <span class=\"token operator\">=</span> Backbone<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">.</span><span class=\"token function\">extend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">initialize</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">allowedToEdit</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> PrivateNote <span class=\"token operator\">=</span> Note<span class=\"token punctuation\">.</span><span class=\"token function\">extend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">allowedToEdit</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">account</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> account<span class=\"token punctuation\">.</span><span class=\"token function\">owns</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<hr>\n<p>class: med-large</p>\n<h1>Attributes</h1>\n<p>The state of a model is determined by its <strong>attributes</strong> - an internal hash that specifies its properties and values. You can set <em>default</em> attributes when you create a model class.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> Note <span class=\"token operator\">=</span> Backbone<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">.</span><span class=\"token function\">extend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">initialize</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">allowedToEdit</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  defaults<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'title'</span><span class=\"token operator\">:</span> <span class=\"token string\">'Unknown Title'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'author'</span><span class=\"token operator\">:</span> <span class=\"token string\">'Unknown Author'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'content'</span><span class=\"token operator\">:</span> <span class=\"token string\">'No content available.'</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<hr>\n<p>class: med-large</p>\n<h1>Using the Constructor</h1>\n<p>When creating an instance of the model, you can pass the initial attributes that will be set on the model object. If you specified an <strong>initialize</strong> function, it will also be called when the model is created.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">Note</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  title<span class=\"token operator\">:</span> <span class=\"token string\">'A Note on the Confinement Problem'</span><span class=\"token punctuation\">,</span>\n  author<span class=\"token operator\">:</span> <span class=\"token string\">'Butler W. Lampson'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<hr>\n<p>class: med-large</p>\n<h2>Accessing Model Attributes</h2>\n<p>Backbone provides several attribute-related properties on models:</p>\n<ul>\n<li><strong>has</strong>, which tests whether a model has a given attrribute.</li>\n<li><strong>get</strong>, which returns the value of a given attribute.</li>\n<li><strong>set</strong>, which lets you specify or change the value of an attribute.</li>\n<li><strong>unset</strong>/<strong>clear</strong>, which let you delete a single attribute or <em>all</em> attributes, respectively.</li>\n<li><strong>toJSON</strong>, which returns a shallow copy of the model's attributes. Note that this does not return a JSON string, but an object.</li>\n</ul>\n<p>There is also the <strong>.attributes</strong> property, which lets you get directly at the internal attributes hash. It's not good practice to use this - it's intended to be private in Backbone.</p>\n<hr>\n<p>class: med-large</p>\n<h1>Attributes Example</h1>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> note <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Note</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  title<span class=\"token operator\">:</span> <span class=\"token string\">'A Note on the Confinement Problem'</span><span class=\"token punctuation\">,</span>\n  author<span class=\"token operator\">:</span> <span class=\"token string\">'Butler W. Lampson'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>note<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token string\">'title'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// --> true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>note<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'author'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// --> 'Butler W. Lampson'</span>\nnote<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'author'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Chad'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>note<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'author'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// --> 'Chad'</span>\nnote<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>note<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token string\">'title'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// --> false</span></code></pre></div>\n<hr>\n<p>class: center, middle, block-text</p>\n<h1><a href=\"http://backbonejs.org/#Collection\">Collections</a></h1>\n<hr>\n<p>class: med-large</p>\n<h1>Collection Basics</h1>\n<p>Collections are ordered sets of models. When you create a collection, you pass in a constructor function for a model, and an optional <em>comparator function</em>  that defines how models are sorted.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> NoteCollection <span class=\"token operator\">=</span> Backbone<span class=\"token punctuation\">.</span>Collection<span class=\"token punctuation\">.</span><span class=\"token function\">extend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  model<span class=\"token operator\">:</span> Note<span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">comparator</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">note</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> note<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'title'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>You can then create a collection by passing in an array of models or model data.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> notes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NoteCollection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>note1<span class=\"token punctuation\">,</span> note2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<hr>\n<p>class: med-large</p>\n<h1>Using Collections</h1>\n<p>There are a number of methods that deal with adding/removing models from collections.</p>\n<ul>\n<li><code class=\"language-text\">add</code> - add a model (or array of models) to the collection, firing an \"add\" event. You can also pass raw attributes objects, which rely on the model property being set appropriately.</li>\n<li><code class=\"language-text\">remove</code> - Remove a model (or array of models) from the collection, firing a \"remove\" event with the previous index as a property on the event options.</li>\n<li><code class=\"language-text\">reset</code> - replace existing models with a new array, firing a \"reset\" event.</li>\n<li><code class=\"language-text\">set</code> - like <code class=\"language-text\">reset</code>, but \"smart:\" only adds new models, only removes models that aren't included anymore, and updates in-common models. Fires all appropriate \"remove\", \"add\", \"change\" events.</li>\n</ul>\n<hr>\n<p>class: block-text, center, middle</p>\n<h1><a href=\"http://backbonejs.org/#Events\">Backbone.Events</a></h1>\n<hr>\n<p>class: med-large</p>\n<h1>Registering Listeners</h1>\n<p>Like other examples we've seen before, Backbone uses <code class=\"language-text\">.on()</code> to bind callback functions to events.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">note<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'change:title'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">note<span class=\"token punctuation\">,</span> title</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  someView<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>You can also pass in a context value for <code class=\"language-text\">this</code> as a third argument.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">note<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'change:author'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">note<span class=\"token punctuation\">,</span> author</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> someView<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<hr>\n<p>class: med-large</p>\n<h1>Listening For Events</h1>\n<p>It's often more idiomatic for some object to listen to events on <em>another</em> object. Backbone provides a <code class=\"language-text\">listenTo()</code> method for this common case.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">view<span class=\"token punctuation\">.</span><span class=\"token function\">listenTo</span><span class=\"token punctuation\">(</span>note<span class=\"token punctuation\">,</span><span class=\"token string\">'change:author'</span><span class=\"token punctuation\">,</span> view<span class=\"token punctuation\">.</span>render<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The callback is always called with the object as context - so this example is equivalent to the previous one.</p>\n<hr>\n<p>class: med-large</p>\n<h1>Triggering Events</h1>\n<p>You can kick off events on an object manually by using the <code class=\"language-text\">trigger()</code> method.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">note<span class=\"token punctuation\">.</span><span class=\"token function\">trigger</span><span class=\"token punctuation\">(</span><span class=\"token string\">'change:author'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Any subsequent arguments to <code class=\"language-text\">trigger()</code> will be passed along to the event callbacks. Also, you aren't limited to predefined events — you can pass any string.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">note<span class=\"token punctuation\">.</span><span class=\"token function\">trigger</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dance'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  type<span class=\"token operator\">:</span> <span class=\"token string\">'polka'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>.footnote[* jQuery also has a trigger method - we used it to write unit tests for your last homework.]</p>\n<hr>\n<p>class: med-large</p>\n<h1>Other Events Methods</h1>\n<ul>\n<li><code class=\"language-text\">once()</code> - just like <code class=\"language-text\">on()</code>, but only runs the callback <em>one time</em>.</li>\n<li><code class=\"language-text\">listenToOnce()</code> - just like <code class=\"language-text\">listenTo()</code> but only runs once.</li>\n<li><code class=\"language-text\">off()</code> - unbinds callbacks that were bound with <code class=\"language-text\">on()</code>. If called with no arguments, removes all callbacks.</li>\n<li><code class=\"language-text\">stopListening()</code> - undoes <code class=\"language-text\">listenTo()</code>. If called with no arguments, object stops listening to all events.</li>\n</ul>\n<p>Unbinding events is important because not doing so can create a <em>memory leak</em>. For instance, say you remove a view from the DOM, but you used <code class=\"language-text\">on()</code> to bind it to some model as context. If you don't use <code class=\"language-text\">off</code>, the view will stay around as long as the model does - which can cause a major slowdown if it happens often enough.</p>\n<p>For more on Backbone memory leaks, check out <a href=\"https://unspace.ca/dev/2013/avoiding-memory-leaks-in-backbone-js\">this thorough blog post</a> on the subject.</p>\n<hr>\n<p>class: center, middle, block-text</p>\n<h1><a href=\"http://backbonejs.org/#View\">Views</a></h1>\n<hr>\n<p>class: med-large</p>\n<h1>Creating Views</h1>\n<p>Much like models, a View class is created by extending <code class=\"language-text\">Backbone.View</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> NoteView <span class=\"token operator\">=</span> Backbone<span class=\"token punctuation\">.</span>View<span class=\"token punctuation\">.</span><span class=\"token function\">extend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  tagName<span class=\"token operator\">:</span> <span class=\"token string\">'li'</span><span class=\"token punctuation\">,</span>\n  className<span class=\"token operator\">:</span> <span class=\"token string\">'note'</span><span class=\"token punctuation\">,</span>\n  events<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'click .title'</span><span class=\"token operator\">:</span> <span class=\"token string\">'expand'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">initialize</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">listenTo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">,</span> <span class=\"token string\">'change'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>render<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">render</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">expand</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<hr>\n<p>class: large</p>\n<h1>View Elements</h1>\n<p>A view in backbone always has the <code class=\"language-text\">el</code> and <code class=\"language-text\">$el</code> properties, which represent the view as a DomNode and jQuery element, respectively. Properties like <code class=\"language-text\">tagName, className, id, attributes</code> are used to define this element's properties. In the example, a <code class=\"language-text\">NoteView</code> will have an element that looks like</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>note<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<hr>\n<p>class: med-large</p>\n<h1>Rendering</h1>\n<p>The default implementation of <code class=\"language-text\">render()</code> in Backbone does nothing - you must define the rendering behavior yourself. This makes Backbone flexible regarding rendering techniques: Underscore templates, Mustache.js, and jQuery element creation are common.</p>\n<p>In general, <code class=\"language-text\">render()</code> should reference <code class=\"language-text\">this.model</code> (or <code class=\"language-text\">this.collection</code>) so that the view reflects the state of the underlying model. The view can <code class=\"language-text\">listenTo()</code> the model so that when the state changes, the view is re-rendered.</p>\n<hr>\n<p>class: large</p>\n<h1>Events</h1>\n<p>View events are specified as a simple object mapping <em>event descriptions</em> to <em>method names</em> (both strings). Event descriptions consist of the event type and a selector; the method names must be defined as functions somewhere in the class.</p>\n<p>For instance, we saw the <code class=\"language-text\">click .title</code> string used a few slides back, corresponding to an <code class=\"language-text\">expand</code> method.</p>\n<hr>\n<p>class: med-large</p>\n<h1>Constructing a View</h1>\n<p>A new view is created similar to a new model. There are several properties that will be attached directly to the new object if passed in: <code class=\"language-text\">model, collection, el, id, className, attributes, events</code>. You generally only use <code class=\"language-text\">model</code> and <code class=\"language-text\">collection</code>, and sometimes <code class=\"language-text\">el</code> if the view's element already exists in the DOM.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> noteView <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NoteView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  model<span class=\"token operator\">:</span> note<span class=\"token punctuation\">,</span>\n  el<span class=\"token operator\">:</span> existingEl\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>When it's time to get rid of a view, you call the <code class=\"language-text\">remove()</code> method, which removes the element from the DOM and causes the view to stop listening to all events.</p>\n<hr>\n<p>class: block-text, center, middle</p>\n<h1><a href=\"http://backbonejs.org/#Router\">Router</a></h1>\n<hr>\n<p>class: med-large, smaller-code</p>\n<p>It's nice to be able to provide a direct link to a certain part of the application, but what if this 'part' only exists client-side? Backbone provides a router that lets you define this behavior for your app.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> MyRouter <span class=\"token operator\">=</span> Backbone<span class=\"token punctuation\">.</span>Router<span class=\"token punctuation\">.</span><span class=\"token function\">extend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  routes<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'help'</span><span class=\"token operator\">:</span>                 <span class=\"token string\">'help'</span><span class=\"token punctuation\">,</span>    <span class=\"token comment\">// #help</span>\n    <span class=\"token string\">'search/:query'</span><span class=\"token operator\">:</span>        <span class=\"token string\">'search'</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// #search/kiwis</span>\n    <span class=\"token string\">'search/:query/p:page'</span><span class=\"token operator\">:</span> <span class=\"token string\">'search'</span>   <span class=\"token comment\">// #search/kiwis/p7</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">help</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">search</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">query<span class=\"token punctuation\">,</span> page</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// note that query and page are passed as parameters</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> myRouter <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<hr>\n<p>class: med-large</p>\n<h1>The Routes Hash</h1>\n<p>The \"routes\" hash maps URLs to functions on your router. It can contain:</p>\n<ul>\n<li>Regular strings (<code class=\"language-text\">help/me</code>)</li>\n<li>Parameters (<code class=\"language-text\">:param</code>), which match a single URL component between slashes</li>\n<li>Splats (<code class=\"language-text\">*splat</code>), which match any number of URL components</li>\n<li>Optional parts <code class=\"language-text\">(/:optional)</code></li>\n</ul>\n<p>Parameters and splats will be passed to the handler function as arguments in the order in which they appear, even if they are optional.</p>\n<p><strong>Note</strong>: <code class=\"language-text\">help</code> and <code class=\"language-text\">help/</code> are <em>not</em> treated the same by Backbone. If you want them to be equivalent, use <code class=\"language-text\">help(/)</code>.</p>\n<hr>\n<p>class: med-large</p>\n<h1>Router Methods</h1>\n<ul>\n<li><strong>navigate(fragment, [options])</strong> - used to update the page to a given URL fragment. To also call the appropriate router function, pass the option <code class=\"language-text\">{trigger: true}</code>; if you don't want to create an entry in the browser history, call with <code class=\"language-text\">{replace: true}</code>.</li>\n<li><strong>route(route, name, [callback])</strong> - Manually creates a route for the router. <code class=\"language-text\">route</code> can be either a string or a <em>regular expression</em>. <code class=\"language-text\">name</code> is used to create an event string for this route, of the form \"route:name\". <code class=\"language-text\">callback</code> can be either a function or a string corresponding to a method on the router object; it will be called with the parameters from the <code class=\"language-text\">route</code> string.</li>\n</ul>\n<hr>\n<p>class: med-large</p>\n<h1>Backbone.History</h1>\n<p>Once all your routers are instantiated, you must call <code class=\"language-text\">Backbone.History.start()</code> to begin dispatching routes. You can pass the following parameters to this method:</p>\n<ul>\n<li><strong>pushState</strong> - old browsers can only listen to routes of the form <code class=\"language-text\">rootUrl#foo/bar/baz</code>, while modern browsers can use <code class=\"language-text\">rootUrl/foo/bar/baz</code> through the <a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/API/DOM/Manipulating_the_browser_history\">History API</a>. Passing <code class=\"language-text\">{pushState: true}</code> tells Backbone to use the modern standard where possible.</li>\n<li><strong>root</strong> - if your application isn't served from the root URL (<code class=\"language-text\">/</code>), you must tell History where the root really is by passing <code class=\"language-text\">{root: &#39;some/url/somewhere&#39;}</code>.</li>\n</ul>\n<hr>\n<p>class: large</p>\n<h1>Up Next</h1>\n<ol>\n<li>This week - Backbone assignment! Focus is on Models, Views, and Collections - with a little router bit thrown in for good measure.</li>\n<li>Due next Sunday</li>\n<li>Next week - HTTP and server-side JavaScript with Express!</li>\n</ol>","frontmatter":{"date":"January 29, 2019","path":"/lectures/6","title":"Backbone.js","metaTitle":null}}},"pageContext":{}}}