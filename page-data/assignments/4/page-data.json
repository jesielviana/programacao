{"componentChunkName":"component---src-templates-markdown-js","path":"/assignments/4","result":{"data":{"markdownRemark":{"html":"<p>Due <strong>Thursday, October 4th, 11:59:59pm</strong>.</p>\n<p>Download the implementation stub <a href=\"/~cis197/assignments/build/CIS197_HW4.zip\">here</a>.</p>\n<h3>Before starting this assignment</h3>\n<p>Review <a href=\"/~cis197/lectures/lecture4\">Lecture 4</a>. You may also find the resources on the <a href=\"/~cis197/lectures\">lecture page</a> helpful.</p>\n<p>If you are completely new to jQuery, you might want to go through\n<a href=\"http://learn.jquery.com/about-jquery/how-jquery-works/\">this tutorial</a>\non the jQuery website.</p>\n<h2>Building a map builder</h2>\n<p><img src=\"/images/map-builder.gif\" alt=\"map-builder\"></p>\n<p>This project will introduce you some important jQuery concepts while helping you\ndesign a map-building application. It will run entirely in the browser; you're\ngoing to submit the whole client-side application (well, the JS parts at least - we'll provide the HTML and CSS). It's inspired a lot by Pok√©mon maps. Here's a general outline of the functionality:</p>\n<ol>\n<li>Pick a swatch from the palette</li>\n<li>Hover over the map canvas to see swatch in context</li>\n<li>Click on the canvas to paint it with a selected swatch</li>\n<li>Use the arrow keys to navigate a player sprite around the map.</li>\n</ol>\n<p>To begin, take a look at the provided HTML and CSS files that lay out the map\nbuilding interface. There are a few files linked to the <code class=\"language-text\">index.html</code> web page -\nstyles in <code class=\"language-text\">main.css</code>, the jQuery library in <code class=\"language-text\">lib/js/jquery-1.11.0.js</code>, and the\nscripts that you will produce in this assignment: <code class=\"language-text\">map-builder.js</code> and <code class=\"language-text\">player.js</code>.</p>\n<p>There are two main sections of concern in <code class=\"language-text\">index.html</code>: the\nswatches palette at the top and the map canvas below it. The map swatches are\nalready populated for you and have associated tile images (they show up as\nbackground images applied through CSS). A palette swatch looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>swatch water-se<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><code class=\"language-text\">water-se</code> is the swatch name; <strong>this will be the same class name applied to map tiles to build up the map</strong>. A 'selected' swatch will have the special 'selected' class applied to it - the default selected swatch should be 'grass'. <strong>Do not change the default selected swatch to something other than 'grass' - we'll expect it to start out as grass in our tests.</strong></p>\n<p><strong><em>TODO</em></strong>: Start off by creating a JavaScript class called <code class=\"language-text\">MapBuilder</code> to\nencapsulate the map builder logic (this will make it easy to convert to a JS\nplugin later on). Its constructor should be accept two arguments:</p>\n<ol>\n<li>A jQuery element that represents the map-builder container. It should contain\na <code class=\"language-text\">.palette</code> element and <code class=\"language-text\">.map</code> element within it. In the provided HTML page,\nyou can immediately see that this corresponds to the <code class=\"language-text\">&lt;div id=&quot;map-builder&quot;&gt;</code>\ncontainer in the document body. The constructor should save this provided\n<code class=\"language-text\">$elem</code> (note the prepended <code class=\"language-text\">$</code> on jQuery variable names) as a property in\nthe <code class=\"language-text\">MapBuilder</code> instance.</li>\n<li>An <em>optional</em> params object with <code class=\"language-text\">width</code> and <code class=\"language-text\">height</code> properties indicating how\nlarge the map should be in tile dimensions. When this argument isn't\nprovided, the <code class=\"language-text\">MapBuilder</code> should resort to some reasonable stored defaults - in\nthis case, a width of 30 and a height of 15.</li>\n</ol>\n<p><em>Note</em>: For this project, it is likely that all the work done by <code class=\"language-text\">MapBuilder</code> will occur in its constructor (not through any instance methods after\nconstruction). We're using the class more as a method of organization and\nencapsulation rather than for more \"traditional\" object-oriented purposes. However, note that this does allow us to pass a MapBuilder object to our Player class, which will greatly simplify things later on.</p>\n<hr>\n<h2>Selecting swatches</h2>\n<p><img src=\"/images/gifs/select-swatches.gif\" alt=\"select-swatches\"></p>\n<p>The first task will be to have <code class=\"language-text\">MapBuilder</code> keep track of which swatch is\ncurrently selected in the palette. Visually (in CSS), we'll represent this with\nthe <code class=\"language-text\">&#39;selected&#39;</code> class on swatches. If the 'grass' swatch is selected, its\npalette element looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>swatch grass selected<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><strong><em>TODO</em></strong>: Write a function on the <code class=\"language-text\">MapBuilder</code> prototype called\n<code class=\"language-text\">setupPalette</code> that gets invoked in the builder constructor (in <code class=\"language-text\">main.js</code>).\nThis setup function should bind a <code class=\"language-text\">click</code> handler to palette swatches that</p>\n<ol>\n<li>Ensures only one swatch ever has the 'selected' class (check out jQuery's\n<a href=\"https://api.jquery.com/addclass/\"><code class=\"language-text\">.addClass</code></a> and\n<a href=\"https://api.jquery.com/removeclass/\"><code class=\"language-text\">.removeClass</code></a> methods).</li>\n<li>Stores the currently selected swatch name in the <code class=\"language-text\">MapBuilder</code> instance.\nYou'll probably want a helper function to extract the swatch name from a DOM\nelement. It will be helpful to get access to the raw DOM element <code class=\"language-text\">classList</code>.\nFor example:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">$grassSwatch <span class=\"token operator\">=</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.swatch.grass'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// jQuery element</span>\n\ngrassSwatch <span class=\"token operator\">=</span> $grassSwatch<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// DOM element</span>\n\ngrassSwatch<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">;</span>              <span class=\"token comment\">// DOM NodeList, which works like an array (an array-like object!)</span></code></pre></div>\n<p><strong>Debugging</strong>: Try logging the swatch name to the console every time the\nselected swatch changes. You ought to be able to click a bunch of swatches and\nsee this value update to values like <code class=\"language-text\">&#39;water-se&#39;</code>, <code class=\"language-text\">&#39;fence-nw&#39;</code>, <code class=\"language-text\">&#39;cave&#39;</code>, etc.</p>\n<hr>\n<h2>Drawing the map canvas</h2>\n<p><strong><em>TODO</em></strong>: Next, write another similar setup function for the map canvas. It\nshould generate <code class=\"language-text\">&lt;div&gt;</code>s for the map tiles according to the provided map size\ndimensions and insert them into the DOM inside the <code class=\"language-text\">.map</code> element. A 2 x 2 map\nwould look like this on the page:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>map<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h3</span><span class=\"token punctuation\">></span></span>Map Canvas<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h3</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>row<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>tile swatch grass<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>tile swatch grass<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>row<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>tile swatch grass<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>tile swatch grass<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>If you use the same class names as listed here, the styles provided with the\nassignment should work right off the bat.</p>\n<p>As mentioned in lecture, it's possible to <strong>generate</strong> a DOM element with jQuery\nby passing an HTML tag string to <code class=\"language-text\">$</code>, like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> $newDiv <span class=\"token operator\">=</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;div>'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// We can invoke jQuery methods on this new div</span>\n$newDiv<span class=\"token punctuation\">.</span><span class=\"token function\">addClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">'swatch'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Until you write <code class=\"language-text\">$newDiv</code> into the <code class=\"language-text\">document</code>, however, it only exists in your\nscript. Take a look at jQuery's <a href=\"https://api.jquery.com/append/\"><code class=\"language-text\">.append</code></a> method\nto write elements into the page DOM.</p>\n<p><em>Note</em>: this layout could have been implemented with a <code class=\"language-text\">&lt;table&gt;</code> (it is, after\nall, simply a grid), but using <code class=\"language-text\">&lt;div&gt;</code>s allows us to write simpler CSS.</p>\n<hr>\n<h2>Previewing swatches</h2>\n<p><img src=\"/images/gifs/preview-swatches.gif\" alt=\"preview-swatches\"></p>\n<p>While building our Pok√©mon level map, it would be nice to preview what a map\ntile would look like in position on the canvas. There are a few ways you can\nmake this work with classes, some of which don't require edits to the provided\nCSS file. A map tile simply looks like:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>tile swatch grass<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>So if you swap out <code class=\"language-text\">&#39;grass&#39;</code> for another swatch name, it takes on that swatch's\nappearance.</p>\n<p><strong><em>TODO</em></strong>: On construction, <code class=\"language-text\">MapBuilder</code> should bind event handlers to the\nnewly generated tiles. In particular, we are interested in the <code class=\"language-text\">mouseenter</code> and\n<code class=\"language-text\">mouseout</code> events on each tile <code class=\"language-text\">&lt;div&gt;</code>. When the mouse hovers over a tile, it\nshould take the appearance of <code class=\"language-text\">MapBuilder</code>'s selected swatch.</p>\n<ul>\n<li><code class=\"language-text\">mouseenter</code>: edit the tile's CSS classes so that it appears to look like the\nselected swatch</li>\n<li><code class=\"language-text\">mouseout</code>: restore the tile's original \"painted-on\" swatch appearance with\nCSS classes</li>\n</ul>\n<p>Remember that jQuery event handlers have this general form:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">onMouseEnter</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// An event handler's context gets bound to its target element on the</span>\n  <span class=\"token comment\">// page. Here, we create a jQuery object handle for the element.</span>\n  <span class=\"token keyword\">var</span> $<span class=\"token keyword\">this</span> <span class=\"token operator\">=</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// do stuff</span>\n<span class=\"token punctuation\">}</span>\n\n$myDiv<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mouseenter'</span><span class=\"token punctuation\">,</span> onMouseEnter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><em>Hint</em>: If you need to store information on a DOM element, it's common to use\na <code class=\"language-text\">data-</code> attribute. You can give this any name; it looks something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>swatch grass<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">data-seq</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>You can then access these attributes in jQuery:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> $grass <span class=\"token operator\">=</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.swatch.grass'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n$grass<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token string\">'seq'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// --> '1'</span>\n$grass<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token string\">'seq'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// updates the 'data-seq' attr</span></code></pre></div>\n<hr>\n<h2>Painting swatches</h2>\n<p>Now the fun part! To allow a user to \"paint\" a swatch (make it stay in place on\nthe map canvas), we'll make them click on a tile. That tile should then take the\nappearance of the selected swatch.</p>\n<p><img src=\"/images/gifs/paint-swatches.gif\" alt=\"paint-swatches\"></p>\n<p><strong><em>TODO</em></strong>: On construction, <code class=\"language-text\">MapBuilder</code> should bind a <code class=\"language-text\">mousedown</code> event\nhandler to the map tiles. This handler will be similar to <code class=\"language-text\">mouseenter</code>, but\nyou'll have to do something special to ensure that the swatch appearance doesn't\nrevert when the mouse leaves the tile.</p>\n<p><strong><em>TODO</em></strong>: In addition, you should implement tile painting by dragging. This\ncan all be done with just the <code class=\"language-text\">mousedown</code> and <code class=\"language-text\">mouseenter</code> events. Think about\nwhat should happen to a tile when the mouse enters it AND the mouse button is\nalready clicked.</p>\n<p><em>Hint</em>: You can access the pressed key or mouse button in an event handler\nthrough the event object:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token constant\">LEFT_MOUSE_BUTTON</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n$grass<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mousedown'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  e<span class=\"token punctuation\">.</span>which <span class=\"token operator\">===</span> <span class=\"token constant\">LEFT_MOUSE_BUTTON</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// --> true</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>However, you can do it without accessing the <code class=\"language-text\">e.which</code> property by storing the mouse\nstate with a <em>closure</em> - and I encourage you to try to do it this way!</p>\n<hr>\n<h2>A playable character</h2>\n<p><img src=\"/images/gifs/playable-character.gif\" alt=\"preview-swatches\"></p>\n<p>It's time to get adventurous like Ash Ketchum and implement a playable character\nwithin this map once it's built. There are sprites for Pikachu in all four orientations\n(left, up, right, and down) in <code class=\"language-text\">hw4/lib/images/sprites</code> - they correspond to the classes\n'facing-left', 'facing-up', 'facing-right', and 'facing-down' in the CSS.</p>\n<p>We are going to implement a separate class called <code class=\"language-text\">Player</code> that generates a player on the map page. This player can move around with the arrow keys.\nThey should be able to move over terrain (e.g. grass) but not through obstructions.</p>\n<p>The <code class=\"language-text\">Player</code> constructor will take 3 arguments: an x-coordinate, a y-coordinate, and\na <code class=\"language-text\">MapBuilder</code> instance. This is where making the <code class=\"language-text\">MapBuilder</code> class comes in handy -\nwe've assigned the <code class=\"language-text\">builder.$elem</code> to be the container for the entire map builder, and\nwe can access this from <code class=\"language-text\">Player</code> now. We can also tack on useful properties like <code class=\"language-text\">width</code>\nand <code class=\"language-text\">height</code> to the builder and reference those from <code class=\"language-text\">Player</code>. Neat!</p>\n<p><strong>TODO</strong>: Create an element for the player and add it to the DOM. Again, you'll need to\ncreate an element by using the jQuery syntax:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;div>'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">'player facing-down'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Once you've created the element, you'll need to add it to the DOM. The correct element\nto add the player to is a child of the map builder element with the class <code class=\"language-text\">.map</code>. If you\ndon't add it to the correct element, its position will be messed up!</p>\n<p><strong>TODO</strong>: Display the player element at the correct position on the page. You must do this\nby setting the <code class=\"language-text\">left</code> and <code class=\"language-text\">top</code> properties in CSS. For instance, if the player's current coordinates are <code class=\"language-text\">(x, y)</code>, then you would set the <code class=\"language-text\">left</code> property to <code class=\"language-text\">(x * SWATCH_SIZE)</code> and\nthe <code class=\"language-text\">top</code> property to <code class=\"language-text\">(y * SWATCH_SIZE)</code>.</p>\n<p><strong>TODO</strong>: Listen for keydown events on <code class=\"language-text\">document</code> and move the player accordingly.</p>\n<p>Actually listening for these events is pretty easy. You'll wrap the <code class=\"language-text\">document</code> in a jQuery object, and bind an event for <code class=\"language-text\">keydown</code>. You'll need to look at the <em>event object</em> to determine which key was pressed. The key codes for [left, up, right, down] are [37, 38, 39, 40], respectively; and the relevant property is <code class=\"language-text\">event.which</code>.</p>\n<p>The tricky part is determining whether a move is valid. You need to ensure that</p>\n<ol>\n<li>The player does not go out of the map boundaries, and</li>\n<li>The tile that the player is moving into is <em>terrain</em> and not an obstacle.</li>\n</ol>\n<p>We've provided you with a handy <code class=\"language-text\">isTerrain</code> function that, given a swatch name, will tell\nyou whether the player can be moved into it or not. However, you'll need to dig into the\nmap itself to determine the swatch name for a given coordinate.</p>\n<p><strong>Hint</strong>: Check out the <a href=\"https://api.jquery.com/eq/\"><code class=\"language-text\">.eq</code></a> method in jQuery - it grabs\nthe nth object from a set of matches.</p>\n<p>Make sure that you're changing the <em>orientation</em> of the player on each move, regardless of\nwhether the move is valid or not. For instance, if the player starts off facing down at\n<code class=\"language-text\">(0, 0)</code> and you receive a 'left' keydown event, you cannot move the player (since this\nwould run them off the map). However, you would <em>still</em> change their orientation class to\n'facing-left' even though the coordinates haven't changed.</p>\n<hr>\n<h2>Make cool maps</h2>\n<p>If you build any cool Pok√©mon maps once you're finished with the assignment,\nplease share them! Post a screenshot to the class Piazza forum.</p>\n<hr>\n<h2>Submitting to Gradescope</h2>\n<p>Submit to gradescope and only upload the <code class=\"language-text\">map-builder.js</code> and <code class=\"language-text\">player.js</code> files. No other files are needed for this assignment.<br>\n<strong>Note: There are a total of 23 tests; however, not all tests will execute if there are errors that break the testing suite</strong> . So double check that you have\ncompleted all the tests before believing you are done. Ask on piazza if you have any questions!</p>\n<hr>\n<h2>Debugging</h2>\n<p>Check out the Chrome DevTools docs / tutorials on\n<a href=\"https://developers.google.com/chrome-developer-tools/docs/javascript-debugging\">JavaScript debugging</a>.</p>","frontmatter":{"date":"January 29, 2019","path":"/assignments/4","title":"Homework 4: Pok√©mon Map Builder","metaTitle":null}}},"pageContext":{}}}