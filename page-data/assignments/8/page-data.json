{"componentChunkName":"component---src-templates-markdown-js","path":"/assignments/8","result":{"data":{"markdownRemark":{"html":"<p>Due <strong>Sunday, November 12th, 11:59:59pm.</strong></p>\n<p>Implementation stub available for download <a href=\"/programacao-para-internet-i/~cis197/assignments/build/CIS197_HW8.zip\">here</a>.</p>\n<h2>Before Starting on this Assignment</h2>\n<p>Review <a href=\"/programacao-para-internet-i/~cis197/lectures/lecture9\">Lecture 9</a>. You may also want to check out the <a href=\"https://github.com/sibnerian/example-extension\">sample code from lecture</a>.</p>\n<p>Review notes on jQuery and DOM manipulation if needed. Also if needed check out Chrome's <a href=\"https://developer.chrome.com/extensions/getstarted\">Getting Started</a>.</p>\n<p>While this may seem obvious, <strong>YOU MUST HAVE CHROME</strong>.</p>\n<h2>Our Chrome Extension</h2>\n<p>Chrome extensions are built with the same tools as websites: HTML, CSS, and Javascript.</p>\n<p>We'll be making an extension that runs on IAmA Reddit posts and hides all\ncomment chains that don't include a comment by the original poster (OP). If you\nare unfamiliar with IAmA's you can check out their structure with\n<a href=\"http://www.reddit.com/r/IAmA/comments/18bhme/im_bill_gates_cochair_of_the_bill_melinda_gates/\">Bill Gate's IAmA</a>,\n<a href=\"http://www.reddit.com/r/IAmA/comments/16mq0g/iamarnold_ask_me_anything/\">Arnold Schwarzenegger's</a>, or <a href=\"http://www.reddit.com/r/IAmA/comments/z1c9z/i_am_barack_obama_president_of_the_united_states/\">the President's</a>. The intent is to reduce the noise and focus on the questions that the OP has answered. The end product will also allow the user to make some small\nconfigurations.</p>\n<p>The end product should function as follows:</p>\n<ul>\n<li>when an IAmA loads, all unanswered comment chains should be hidden (the filtering initially applies only to the OP).</li>\n<li>the mechanism to hide the comments should <strong>only</strong> apply to IAmA pages (<a href=\"http://www.reddit.com/r/IAmA/comments/blah_blah_blah\">http://www.reddit.com/r/IAmA/comments/blah_blah_blah</a>).</li>\n<li>\n<p>the extension icon should provide a popup with:</p>\n<ul>\n<li>a button to apply the comment filtering</li>\n<li>a button to remove the comment filtering</li>\n<li>a text input that determines which username to filter by</li>\n</ul>\n</li>\n</ul>\n<p>This homework will be mostly in small steps, and it would be prudent not to jump around.</p>\n<h3>Loading Your Extension</h3>\n<p>To actually use your extension in Chrome, you first have to load it. Go to the\nExtensions page (chrome://extensions/) and check Developer Mode in the top\nright corner. Click Load Unpacked Extensions and find the homework directory.\nMake sure the extension is enabled. Whenever you change any of the source\nfiles, you need to return to this page and reload the extension before the\nchanges take affect.</p>\n<hr>\n<h2>The Manifest File</h2>\n<p>Every chrome extension needs a <em>manifest file</em> to declare its meta-information.</p>\n<p>This is in the form of a JSON file <code class=\"language-text\">manifest.json</code>, that has the structure:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"manifest_version\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"IAmA Parser\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Removes all comment chains from Reddit post without OP\"</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1.0\"</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token property\">\"background\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"background.js\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"persistent\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token property\">\"permissions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token comment\">// your permissions here, e.g. declarativeContent</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\n    ...\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>TODO</strong>: The permissions array declares what resources or APIs your app can use. You should begin by adding in the <code class=\"language-text\">declarativeContent</code> permission which is used in <code class=\"language-text\">background.js</code> to add the extension icon on the right pages.</p>\n<p>As we continue you will add new elements to the manifest as well.</p>\n<hr>\n<h2>Enabling Content Scripts</h2>\n<h4><strong><code class=\"language-text\">manifest.json</code></strong></h4>\n<p>In order to inject JavaScript into a page as it loads, we must use content scripts. Content scripts can be JavaScript or CSS and are declared in the manifest file. You will inject two JavaScript files (<code class=\"language-text\">comment-parser.js</code>, <code class=\"language-text\">main.js</code>. <code class=\"language-text\">jquery.min.js</code>) and one CSS file (<code class=\"language-text\">parse.css</code>). We have provided <code class=\"language-text\">parse.css</code> and <code class=\"language-text\">main.js</code> which you should quickly look over (both are only a couple lines) and jQuery. These must all be declared in the manifest as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\">    <span class=\"token property\">\"content_scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"matches\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"...\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"css\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"...\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"js\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"...\"</span> <span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p>The <code class=\"language-text\">css</code> and <code class=\"language-text\">js</code> arrays should have the paths to the content script files, and <code class=\"language-text\">matches</code> is an array of URLs in which the scripts should be injected. For example, <code class=\"language-text\">&quot;http://www.facebook.com/*&quot;</code> would be all sites with the Facebook domain <em>only over HTTP</em>. <code class=\"language-text\">&quot;http://www.facebook.com/messages/*&quot;</code> would match anything on Facebook that had a path starting with <code class=\"language-text\">/messages/</code>.</p>\n<p><strong>TODO</strong>: You'll need to write some matches for <code class=\"language-text\">www.reddit.com</code>. Keep in mind that the only paths you're interested in start with <code class=\"language-text\">/r/IAmA/comments/</code> - we're only filtering comment chains in /r/IAmA. <strong>Be sure to include both 'http' and 'https' versions for your matches.</strong></p>\n<p>Once you have added these, the next step is to actually write the JavaScript!</p>\n<hr>\n<h2>Parsing Comments</h2>\n<h4><strong><code class=\"language-text\">content_scripts/comment-parser.js</code></strong></h4>\n<p>To implement this extention we will <strong>not</strong> be using the Reddit API, but\ninstead will be <em>adding classes to the elements in the page</em>. The Reddit DOM is\na bit odd (lots of divs have the class 'thing' for some reason?), so the work to find the comments and OP name is done in <code class=\"language-text\">main.js</code> (which is provided). You will be writing the CommentParser which takes in its constructor a jQuery object that has all top level comment chains and the OP username as a string. You will implement two functions for CommentParser: parse, and filter.</p>\n<p><strong>TODO</strong>: Implement parse.</p>\n<p>Parse should take a username (String) as a parameter and apply the classes <code class=\"language-text\">answered-chain</code> and <code class=\"language-text\">unanswered-chain</code> to each top level comment based on whether the username shows up in the chain. Note that only one of these classes should ever be applied to a top level comment at a time!</p>\n<p>Also of note, the parse function should be desgined to be idempotent. This means calling it repeatedly with the same author argument should always yield the same overall result, and calling it with a new author argument should yield a result as if previous parse calls we never made.</p>\n<p>Usernames appear in links with the <code class=\"language-text\">author</code> class, and it is\nsufficent to simply <em>find</em> all authors within a top level comment. If you have\nany trouble with this part, we would encourage you to inspect an IAmA's DOM\nmanually yourself with the Chrome console. <em>If an empty string or no username is given to the parse function</em>, parse using the OP's username as the default. Parse should also turn on the filtering.</p>\n<p>Finally, parse should call <code class=\"language-text\">this.filter(true)</code> so that whenever a new username is parsed, comment chains without that username are immediately filtered.</p>\n<p><strong>TODO</strong>: Implement filter.</p>\n<p>Filter shoul take in a boolean indicating whether unanswered chains should be filtered, and appropriately toggle the visibility of <code class=\"language-text\">unanswered-chain</code>s. I.e. when the page first loads, <code class=\"language-text\">filter(true)</code> will be called in the parse method, and all unanswered chains should be hidden; if <code class=\"language-text\">filter(false)</code> is subsequently called they should be shown. This should not change any classes; rather, you should use <code class=\"language-text\">$topLevelComment.css(&#39;display&#39;, &#39;block&#39;)</code> to show comments, and <code class=\"language-text\">$topLevelComment.css(&#39;display&#39;, none&#39;)</code> to hide comments.</p>\n<p>Please make sure you use prototypal inheritance when adding these functions to the CommentParser. If you need a refresher on how to add functions prototypally, see <a href=\"lectures/lecture2.html#18\">the lecture slides</a> on the subject.</p>\n<p>To test this part, just run the extention on an IAmA page - <code class=\"language-text\">content-parser.js</code> should be loaded thanks to our manifest file. Any console logging done in CommentParser will go to the page's console.</p>\n<hr>\n<h2>Creating the Popup</h2>\n<h4><strong><code class=\"language-text\">popup/popup.js</code></strong></h4>\n<p>Once you have gotten the extension to successfully hide comment chains without an OP answer, its time to create a popup in order to toggle the visibility of these comments. The popup is simply an HTML document that has been given to you. In order for this HTML file to be used as a the popup, it must be declared in the manifest:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\">    <span class=\"token property\">\"page_action\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"default_popup\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"popup/popup.html\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"default_icon\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"popup/icon.png\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"default_title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"IAmA Parser\"</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Also add the background script which we have provided for you:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"background\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"background.js\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"persistent\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p>Reload the extension. You should now see an icon on the right end of the URL that should show a popup when clicked. This icon should only show up for IAmA pages -- this is done in background.js, which you should check out (but don't need to edit).</p>\n<p><strong>TODO:</strong> Implement <code class=\"language-text\">popup.js</code>.</p>\n<p>Next, we'll add functionality to the input in the popup. When the 'REMOVE FILTER' button is pressed, the unanswered chains should show up (<code class=\"language-text\">window.parser.filter(false)</code>); when the 'APPLY FILTER' button is pressed, the unanswered chains should be hidden (with a call to <code class=\"language-text\">window.parser.filter(true)</code>. For testing purposes, be sure that you use a <code class=\"language-text\">click</code> event listener for these. When a username is entered into the text input, the comments should be hidden based on which chains that username has been in - you'll want to call <code class=\"language-text\">window.parser.parse(new_username)</code>. For the text input, listen for the <code class=\"language-text\">keydown</code> event. <em>If you listen for the wrong events, you'll fail our tests even if things \"work,\" so please be careful.</em></p>\n<p>Note that any jQuery selecting done in <code class=\"language-text\">popup.js</code> will only search popup.html.In order to run JS in the IAmA tab itself, the Chrome tab's executeScript must be used. You can find the full documentation on that <a href=\"https://developer.chrome.com/extensions/tabs#method-executeScript\">here</a>. Here are a few things to note, however:</p>\n<ul>\n<li>The first parameter, <code class=\"language-text\">tabId</code>, is optional, and you won't need it - the default is the active tab of the current window.</li>\n<li>Your second parameter should just be a plain object with a 'code' property that specifies the code to run in the Reddit window (hint - you wrote a filter function earlier in this assignment).</li>\n<li>The third parameter, <code class=\"language-text\">callback</code>, is also optional - you won't need it.</li>\n</ul>\n<p>This will require another permission -- the <code class=\"language-text\">activeTab</code> permission -- so be sure to add this to the manifest.</p>\n<p>Now, everything should be working! You should be able to reload your extension and cruise around <a href=\"http://www.reddit.com/r/IAmA/\">reddit.com/r/IAmA</a>, filtering the comment chains as you wish.</p>\n<hr>\n<h2>Submitting</h2>\n<p>Now that you're done, make sure that everything works locally (and complies to\nthis specification) before submitting to BRUCE.</p>\n<p>In order to submit, run the following command and submit the resulting zip\nfile:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">zip -r files.zip content_scripts/comment-parser.js manifest.json popup/popup.js</code></pre></div>\n<p><strong>NOTE:</strong> this won't work if you use a name other than <code class=\"language-text\">files.zip</code>!</p>","frontmatter":{"date":"January 29, 2019","path":"/assignments/8","title":"Homework 8: Reddit AMA Chrome Extension","metaTitle":null}}},"pageContext":{}}}